<?xml version="1.0" encoding="UTF-8"?>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
 * Master build file for the OME-Shoola java client.
 * You can use this file to compile, run, test, and package the application
 * for distribution.  Furthermore, you can generate all other project artifacts,
 * like documentation.  Please refer to the usage target for further details.
 *
 *
 * DEPENDENCIES
 * This is an Ant build file and requires Ant 1.6 or later to run the build.
 * Furthermore, all the libraries listed in the lib.xml header have to be 
 * available to Ant.
 * There are several ways to link those libraries to the Ant's runtime, ranging
 * from the -lib switch on the Ant's command line to placing the jars under
 * {ANT_HOME}/lib or, even better, under {YOUR_HOME}/.ant/lib.  Please refer
 * to the Ant manual for details.
 *
 *
 * CHILD BUILD FILES
 * The various activities that make up the build process have been factored in
 * several child build files within this directory.  This master build file is
 * responsible for pulling them together in the right order.  Child build files
 * are required to:
 * 
 *  + Define a project name after the file name.  For example the project name
 *    of the child build in 'app.xml' is 'app'.
 *  + Define a properties namespace.  This is done by prefixing all properties
 *    defined within the child file with the child project's name.  This is
 *    important to avoid collisions, as Ant properties are global.
 *  + Check for availability of external properties.  If a child depends on
 *    properties defined elsewhere (another child file/master file), then it
 *    has to explicitly check that those properties have been defined and error
 *    if some is missing.  The checks are performed through checkdef tasks 
 *    placed at the beginning of the file and outside of any target.  This way,
 *    a broken dependency graph is likely to show up at import time in the 
 *    master build file.
 *  + Have a 'clean' target.  This target has to remove all output generated by
 *    the child's targets.
 *  + Have a 'usage' target.  This target echoes the list of available targets.
 *    That is, the list of all public targets within the child build.
 *  + Use the same conventions to denote public targets.  The conventions are 
 *    simple: public targets have a description attribute (private targets do
 *    not) and are listed by the usage target.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
<project name="OME-Shoola" default="usage" basedir="../">
 
  <description>The OME-Shoola Java Client Project.</description> 
  
  <!-- The build directory.  Every target outputs below this directory. -->  
  <property name="build.dir" location="OUT"/>

  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * The following properties define the mappings to the artifacts relevant
   * to the build.  These artifacts are contained in the local CVS repository
   * hosting this build file.  Here's a short description of contents of the 
   * CVS dirs that are relevant to the build:
   *   + root dir: Contains the license file.
   *   + build: Contains this master build file and all its children.
   *   + config: Container and agents configuration files.
   *   + docgen: Documentation artifacts used to build actual documents.
   *   + launch: Scripts for launching the app and install instructions.
   *   + LIB: All jars required by the app.  Its test sub-dir contains 
   *          additional jars required by the test code.
   *   + SRC: All java source files and app resources.
   *   + TEST: All test code and relative resources.  
   *
   * NOTE: The root namespace for properties defined in the master build file
   *       is 'base'.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <property name="base.build.dir" location="build"/> 
  <property name="base.config.dir" location="config"/>
  <property name="base.launch.dir" location="launch"/> 
  <property name="base.lib.dir" location="LIB"/>
  <property name="base.src.dir" location="SRC"/>
  <property name="base.test.dir" location="TEST"/> 
  <property name="base.test.lib.dir" location="${base.lib.dir}/test"/>
  <property name="base.licensefile" location="LICENSE"/>
  <property name="base.docgen.index.file" location="docgen/index.html"/> 
  <property name="base.docgen.javadoc.cssfile" 
            location="docgen/javadoc/stylesheet.css"/>
  <property name="base.docgen.xdocs.dir" location="docgen/xdocs"/> 
  <property name="base.docgen.xdocs.cssfile" 
            location="docgen/xdocs/styles/style.css"/>
  <property name="base.docgen.xdocs.stylefile" 
            location="docgen/xdocs/styles/style.xml"/> 
  <property name="base.docgen.xdocs.xsl.dir" location="docgen/xdocs/xsl"/>
  <property name="base.docgen.xdocs.navig.dir" location="docgen/xdocs/navig"/> 
 
  
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * Include the tasks lib and all children. 
   * The inclusion order is important because some child files depend on 
   * properties defined by others and all child files check for the needed
   * external properties at import time.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <typedef file="${base.build.dir}/lib.xml"/>
  <import file="${base.build.dir}/app.xml"/>
  <import file="${base.build.dir}/test.xml"/> 
  <import file="${base.build.dir}/docs.xml"/> 
  <import file="${base.build.dir}/dist.xml"/>
 
 
  
  
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * Set the timestamp and create the build directory where all output will go. 
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="init"> 
    <tstamp/>
    <mkdir dir="${build.dir}"/> 
  </target> 
  
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * Build, test, and package the app.
   * We first remove any previous build artifact, then we go through the main 
   * trunk of the build process until the default app bundle is produced.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="all"
          depends="clean,dist" 
          description="Build, test, and package the app.">
  </target>
  
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * Remove all output generated by the last build.
   * This target first forwards a clean to all children and then deletes the 
   * ${build.dir}.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="clean"
          depends="app.clean,test.clean,dist.clean,docs.clean" 
          description="Remove all output generated by last build.">
    <delete dir="${build.dir}"/>
  </target>
  
  <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   * Output a list of all available targets.
   * This is the list of all public targets available through this file or
   * any of the imported child files.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="usage"
          depends="app.usage,test.usage,docs.usage,dist.usage" 
          description="List all available targets.">
    <echo level="info">
Global targets:
--------------- 
  all: Build, test, and package the app under ${dist.dir}.
  clean: Remove all output generated by the last build. 
    </echo> 
  </target> 
  
</project>