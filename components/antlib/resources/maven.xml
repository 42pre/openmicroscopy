<?xml version="1.0" encoding="utf-8"?>
<project name="maven" default="all" xmlns:mvn="urn:maven-artifact-ant">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright (C) 2005 Open Microscopy Environment
#       Massachusetts Institue of Technology,
#       National Institutes of Health,
#       University of Dundee    
#                       
#               
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later
#    version.           
#                       
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#       
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free
#    Software           
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#    02111-1307  USA
#       
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
  DOCUMENTATION:
  ==============================================================================
  Used to generate the classpath.xml and .classpath files under each
  component. Parses the various pom.xml files (in OMERO_HOME and each
  component) to determine the transitive dependencies for the project.


  See
    http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
    http://svn.apache.org/repos/asf/maven/components/trunk/maven-artifact-ant/sample.build.xml

-->


 <import file="global.xml"/>

 <target name="initTaskDefs">
    <!-- don't forget to update the version! -->
    <path id="maven.classpath">
      <pathelement location="${tools.dir}/maven-artifact-ant-2.0.2-dep.jar" />
    </path>

    <typedef 
       resource="org/apache/maven/artifact/ant/antlib.xml"
       uri="urn:maven-artifact-ant">
      <classpath refid="maven.classpath"/>
    </typedef>

    <mvn:localRepository id="local.repository" location="${omero.repo.local}" layout="default"/>
    <mvn:remoteRepository id="remote.repository" url="${omero.repo.remote}" layout="default"/>

  </target>

  <target name="all">
    
    <!-- Call this file again for each component -->
    <iter file="../antlib/resources/maven.xml">
      <target name="run"/>
    </iter>
 
  </target>

  <target name="run" depends="initTaskDefs" 
    description="Main target - builds the ant build system for omero">

    <mvn:pom file="pom.xml" id="maven.project"/>

    <echo>Artifact ID = ${maven.project.artifactId}</echo>
    <echo>Parent Artifact ID = ${maven.project.parent.artifactId}</echo>

    <mvn:dependencies filesetId="maven.compile.fileset"
                      pathId="maven.compile.classpath" 
                      verbose="false" useScope="compile">
      <localRepository refid="local.repository"/>
      <remoteRepository refid="remote.repository"/>
      <pom refid="maven.project"/>

    </mvn:dependencies>

    <mvn:dependencies filesetId="maven.test.fileset"
                      pathId="maven.test.classpath" 
                      verbose="false" useScope="test">
      <localRepository refid="local.repository"/>
      <remoteRepository refid="remote.repository"/>
      <pom refid="maven.project"/>
    </mvn:dependencies>

    <!-- Example
    <mvn:dependencies filesetId="blah">
      <dependency groupId="org.apache.maven.wagon" artifactId="wagon-provider-test" version="1.0-alpha-4">
        <exclusion groupId="junit" artifactId="junit"/>
      </dependency>
    </mvn:dependencies>
    -->

    <property name="mvn.group" value="${maven.project.groupId}"/>
    <property name="mvn.artifact" value="${maven.project.artifactId}"/>
    <property name="mvn.version" value="${maven.project.artifact.version}"/>
    <property name="mvn.packaging" value="${maven.project.packaging}"/>

    <antcall target="build-build" inheritRefs="true"/>
    <antcall target="generate" inheritRefs="true"/>

  </target>

  <target name="copy">

    <copy todir="/tmp/test-no-deps" verbose="true">
      <fileset refid="runtime.fileset"/>
    </copy>

  </target>

 
  <target name="install" depends="initTaskDefs">

    <property name="outJar" value="${maven.project.build.directory}/${maven.project.build.finalName}.jar"/>

    <mvn:install file="${outJar}">
      <pom refid="maven.project"/>
    </mvn:install>

    <mvn:deploy file="${outJar}">
      <remoteRepository url="scp://localhost/tmp/deployment-repo">
        <authentication username="brett"
privateKey="${user.home}/.ssh/id_dsa"/>
      </remoteRepository>
      <pom refid="maven.project"/>
    </mvn:deploy>
  </target>

    <!-- = = = = = = = = = = = = = = = = =
          maven tools
         = = = = = = = = = = = = = = = = = -->
	<target name="build-build" depends="prepare,load-groovy"
		description="Generates files for ant usage">
		<groovy src="${import.dir}/groovy/antClasspath.groovy"/>
		<groovy src="${import.dir}/groovy/eclipseClasspath.groovy"/>
	</target>

</project>


