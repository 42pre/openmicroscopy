<?xml version="1.0" encoding="utf-8"?>
<project name="global" default="help" basedir=".">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright (C) 2005 Open Microscopy Environment
#       Massachusetts Institue of Technology,
#       National Institutes of Health,
#       University of Dundee    
#                       
#               
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later
#    version.           
#                       
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#       
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free
#    Software           
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#    02111-1307  USA
#       
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
  DOCUMENTATION:
  ==============================================================================
  Central ant script. It imports all other helper scripts and property
  files in the proper order, and in general can be imported from
  anywhere. 

  global.xml will determine its own location and bootstrap all other
  definitions from there.

-->

	<!-- Where to find things -->
	<dirname property="import.dir"  file="${ant.file.global}"/>
	<import file="${import.dir}/directories.xml"/>

	<!-- Define properties -->
	<property environment="env" />
	<property file="${root.dir}/omero.properties" />
	<property file="${root.dir}/hibernate.properties" />
	<property file="${import.dir}/messages.properties" />
	
	<!-- Imports -->
	<import file="${import.dir}/patterns.xml"/>
	<import file="${import.dir}/macros.xml"/>
	<import file="${import.dir}/lifecycle.xml"/>
	<import file="${import.dir}/server.xml"/>
	<import file="${import.dir}/setup.xml"/>
	
    <!-- = = = = = = = = = = = = = = = = =
          help 
         = = = = = = = = = = = = = = = = = -->
	<target name="help">
		<echo>
			This build file is intended for import only.
		</echo>
	</target>


    <!-- = = = = = = = = = = = = = = = = =
          variables
         = = = = = = = = = = = = = = = = = -->
	<target name="variables-define">
		<condition property="test.with.fail">
			<equals arg1="${multi.test.with.fail}" arg2="true"/>
		</condition>
		<condition property="test.skip">
			<equals arg1="${multi.test.skip}" arg2="true"/>
		</condition>
		<condition property="generate.skip">
			<equals arg1="${multi.generate.skip}" arg2="true"/>
		</condition>
	</target>

    <!-- = = = = = = = = = = = = = = = = =
          classpath
         = = = = = = = = = = = = = = = = = -->
	<target name="classpath-check">
		<condition property="maven.classpath.defined">
			<and>
				<isreference refid="maven.compile.classpath"/>
				<isreference refid="maven.test.classpath"/>
			</and>
		</condition>
		<condition property="generated.classpath.defined">
			<and>
				<isreference refid="generated.compile.classpath"/>
				<isreference refid="generated.test.classpath"/>
			</and>
		</condition>
		<fail>
			<condition>
			<not><or>
				<isset property="maven.classpath.defined"/>
				<isset property="generated.classpath.defined"/>
			</or></not>
			</condition>
			${msg.global.no.classpath}
		</fail>
	</target>

	<target name="classpath-ant" unless="maven.classpath.defined">
		<path id="omero.compile.classpath">
			<path refid="generated.compile.classpath"/>
		</path>
		<path id="omero.test.classpath">
			<path refid="generated.test.classpath"/>
		</path>
	</target>

	<target name="classpath-maven" if="maven.classpath.defined">
		<path id="omero.compile.classpath">
			<path refid="maven.compile.classpath"/>
		</path>
		<path id="omero.test.classpath">
			<path refid="maven.test.classpath"/>
		</path>
	</target>

	<target name="classpath-define" depends="classpath-check,classpath-maven,classpath-ant">
		<path id="omero.classpath">
			<path refid="omero.compile.classpath"/>
			<path refid="omero.test.classpath"/>
			<pathelement location="${classes.dir}/" />
			<pathelement location="${resrc.dir}/" />
			<pathelement location="${resrc.dest}/" />
		</path>
		<pathconvert property="omero.path" refid="omero.classpath"/>
		<pathconvert property="compile.path" refid="omero.compile.classpath"/>
		<pathconvert property="test.path" refid="omero.test.classpath"/>
	</target>

    <!-- = = = = = = = = = = = = = = = = =
          common tasks
         = = = = = = = = = = = = = = = = = -->
	<target name="load-hibernate">
		<available property="hibernate-exists" classname="org.hibernate.Hibernate" classpathref="omero.classpath" />
		<available property="hibernate.ext-exists" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="omero.classpath" />
		<fail unless="hibernate-exists" message="${msg.macro.missing_fail} Hibernate"/>
		<fail unless="hibernate.ext-exists" message="${msg.macro.missing_fail} Hibernate Tools"/>
		<taskdef classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="omero.classpath" name="hibernatetool"/>
	</target>
	
	<target name="load-groovy">
		<available property="groovy-exists" classname="org.codehaus.groovy.ant.Groovy" classpathref="omero.classpath" />
		<fail unless="groovy-exists" message="Groovy ${msg.macro.missing_fail}"/>
		<taskdef classname="org.codehaus.groovy.ant.Groovy" classpathref="omero.classpath" name="groovy"/>
	</target>
		
</project>
