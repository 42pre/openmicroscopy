<?xml version="1.0" encoding="utf-8"?>
<project name="global" default="help" basedir=".">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  DOCUMENTATION:
  ==============================================================================
  Central ant script. It imports all other helper scripts and property
  files in the proper order, and in general can be imported from
  anywhere.

  global.xml will determine its own location and bootstrap all other
  definitions from there.

-->

        <tstamp>
          <format property="now" pattern="yyyyMMddHHmmss"/>
        </tstamp>

        <!-- Where to find things. It is assume that to have imported this 
        file any build script will have had to define the import.dir variable-->
        <import file="${import.dir}/directories.xml"/>

        <!-- Define properties :
                The user's environment (env) overrides all other
                variables, then comes the user defined
                local.properties, then the controlled *.properties
                files.
        -->

        <property environment="env" />
        <property file="${root.dir}/etc/local.properties" />
        <property file="${root.dir}/etc/local.properties.example" />
        <property file="${root.dir}/etc/omero.properties" />
        <property file="${root.dir}/etc/hibernate.properties" />
        <property name="test.with.fail" value="true"/>
        <property name="classpath.file" value="classpath.xml"/>
        <property name="omero.resolver" value="omero-resolver"/>

        <!-- Imports -->
        <import file="${import.dir}/patterns.xml"/>
        <import file="${import.dir}/macros.xml"/>

        <!-- Message bundles, so all properties are defined -->
        <property file="${import.dir}/messages.properties" />

        <!-- Post-import properties -->
        <property name="sql.dir"  value="${omero.home}/sql/${omero.db.profile}/${omero.dbversion}__${omero.dbpatch}"/>
        <condition property="ice.home" value="${env.ICE_HOME}">
            <isset property="env.ICE_HOME"/>
        </condition>

        <!--
          The idea for this macro is taken from maven2. Use deps-buildlist
          to create deps.build.path if you do not have one specified.
        -->
        <macrodef name="iterate">
                <attribute name="inheritAll" default="false"/>
                <attribute name="inheritRefs" default="false"/>
                <attribute name="buildpathref" default="deps.build.path"/>
                <attribute name="target"/>
                <sequential>
                <subant verbose="true" buildpathref="@{buildpathref}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}" failonerror="true" target="@{target}">
                        <property name="multi.test.with.fail" value="${test.with.fail}"/>
                        <property name="multi.test.skip" value="${test.skip}"/>
                        <property name="multi.generate.skip" value="${generate.skip}"/>
                        <property name="multi.checks.skip" value="${checks.skip}"/>
                        <property name="multi.emma.enabled" value="${emma.enabled}"/>
                        <!-- Defaults set in dependencies.xml -->
                        <property name="ivy.buildlist.ivyfilepath" value="${ivy.buildlist.ivyfilepath}"/>
                        <property name="ivy.dep.file" value="${ivy.dep.file}"/>
                        <propertyset>
                            <propertyref prefix="env"/>
                        </propertyset>
                </subant>
                </sequential>
        </macrodef>

        <macrodef name="defineVariables">
            <sequential>
                <condition property="test.with.fail">
                        <equals arg1="${multi.test.with.fail}" arg2="true"/>
                </condition>
                <condition property="test.skip">
                        <equals arg1="${multi.test.skip}" arg2="true"/>
                </condition>
                <condition property="emma.enabled">
                        <equals arg1="${multi.emma.enabled}" arg2="true"/>
                </condition>
                <condition property="generate.skip">
                        <equals arg1="${multi.generate.skip}" arg2="true"/>
                </condition>
                <condition property="checks.skip">
                        <equals arg1="${multi.checks.skip}" arg2="true"/>
                </condition>
            </sequential>
        </macrodef>


    <!-- = = = = = = = = = = = = = = = = =
          help
         = = = = = = = = = = = = = = = = = -->
        <target name="help">
                <echo>
                        This build file is intended for import only.
                </echo>
        </target>

</project>
