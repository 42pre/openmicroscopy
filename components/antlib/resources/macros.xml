<?xml version="1.0" encoding="utf-8"?>
<project name="macros" basedir="." default="">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
  DOCUMENTATION:
  ==============================================================================
  Macros generally useful throughout the build system. No properties
  or targets are defined here. 

-->
	
    <!-- = = = = = = = = = = = = = = = = =
          build tools
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="iterate">
		<attribute name="target"/>
		<sequential>
		<iter><target name="@{target}"/></iter>
		</sequential>
	</macrodef>

	<macrodef name="iter">
		<element name="elem" implicit="yes"/>
		<attribute name="inheritAll" default="false"/>
		<attribute name="inheritRefs" default="false"/>
		<attribute name="file" default="build.xml"/>
		<sequential>
		<antRun component="dsl"       file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="common"    file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="romio"     file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="rendering" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="server"    file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="blitz"     file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="client"    file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="bioformats-omero"    file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="tools"     file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<!-- app must be very last so that the services.jar can be produced from tools/ -->
		<antRun component="app"       file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		</sequential>
	</macrodef>

	<macrodef name="antRun">
		<attribute name="file" default="build.xml"/>
		<attribute name="component"/>
		<attribute name="inheritAll" default="false"/>
		<attribute name="inheritRefs" default="false"/>
		<element name="targets" implicit="yes"/>
		<sequential>
		<echo> +===========================================================================================+ </echo>
		<echo> |                                                                                             </echo>
		<echo> |                                      @{component}                                           </echo>
		<echo> |                                                                                             </echo>
		<echo> +===========================================================================================+ </echo>
		<ant dir="${components.dir}/@{component}" antfile="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}">
			<property name="current.component" value="@{component}"/>
			<property name="multi.test.with.fail" value="${test.with.fail}"/>
			<property name="multi.test.skip" value="${test.skip}"/>
			<property name="multi.generate.skip" value="${generate.skip}"/>
			<property name="multi.checks.skip" value="${checks.skip}"/>
			<property name="classpath.file" value="${classpath.file}"/>
			<targets/>
		</ant>
		</sequential>
	</macrodef>

	<macrodef name="svn">
		<attribute name="command"/>
		<sequential>
		<exec executable="svn" failonerror="true">
			<arg line="@{command}"/>
		</exec>
		</sequential>
	</macrodef>

	<macrodef name="sql_run">
		<attribute name="print" default="false"/>
		<element name="commands" implicit="yes"/>
		<sequential>
                <sql
                        driver="${hibernate.connection.driver_class}"
                        url="${hibernate.connection.url}"
                        userid="${hibernate.connection.username}"
                        password="${hibernate.connection.password}" 
			print="@{print}" 
			classpathref="omero.classpath">
			<commands/>
		</sql>
		</sequential>
	</macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          copy resource files to generated-sources          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="copyResource">
        <attribute name="file"/>
        <sequential>
			<basename property="props.file.prop" file="@{file}"/>
			<available file="@{file}" property="${props.file.prop}.exists"/>
        	<fail unless="${props.file.prop}.exists">
			@{file} ${msg.macro.missing_properties}
      		</fail>    
           <copy file="@{file}" todir="${resrc.dest}" failonerror="true" />
	   <copy file="@{file}" todir="${classes.dir}" failonerror="true" />
        </sequential>
    </macrodef>
	
    <!-- = = = = = = = = = = = = = = = = =
          checks if a build step is needed    
         = = = = = = = = = = = = = = = = = -->

	<macrodef name="is-done">
        <attribute name="name"/>
		<attribute name="srcdir"/>
		<attribute name="includes"/>
        <sequential>
	    	<uptodate property="@{name}.up.to.date"> 
    		  	<mergemapper to="${done.dir}/@{name}.done"/>
    			<srcfiles dir= "@{srcdir}" includes="@{includes}"/>
    		</uptodate>
    		<condition property="@{name}.not.required">
    		  <and>
    		  	<available file="${done.dir}/@{name}.done"/>
			<isset property="@{name}.up.to.date"/>
    		  </and>
    		</condition>
        </sequential>
    </macrodef>

	<macrodef name="done">
		<attribute name="name"/>
		<sequential>
			<touch file="${done.dir}/@{name}.done"/>
		</sequential>
	</macrodef>

      <macrodef name="makeManifest">
          <attribute name="property"/>
	  <sequential>
	  <pathconvert property="mf.classpath"
	      refid="omero.classpath" 
	      pathsep=" " dirsep="/">
	      <flattenmapper/>
          </pathconvert>
	  </sequential>
      </macrodef>

      <!-- Gather all compiled services together into a single
      services.jar.  Also, make all application jars available to the
      services.jar via the MANIFEST file *AND* add one additional
      (possibly non-extant) extensions.jar which can be created by 3rd
      parties and added to the EAR file (top-level) for runtime class
      lookups.

      services.jar is placed in the specified directory. Optionally, a
      manifest string can be specified. It defaults to the empty
      string, but a manifest can be generated via makeManifest if
      omero.classpath has been defined.-->

      <macrodef name="useServices">
          <attribute name="dir"/>
	  <attribute name="manifest" default=""/>
	  <sequential>
          <jar destfile="@{dir}/services.jar" basedir="${tools.unjar}">
            <manifest>
              <attribute name="Class-Path" value="@{manifest} extensions.jar"/>
    	    </manifest>
          </jar>
	  </sequential>
      </macrodef>
	
    <!-- = = = = = = = = = = = = = = = = =
          hibernate code-gen          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="hibernate">
	<attribute name="mappings" default="${resrc.dest}"/>
    	<element name="templates" implicit="yes"/>
        <sequential>
    		<hibernatetool destdir="${generated.dir}" templatepath="${resrc.dir}">
    			<classpath refid="omero.classpath"/>

    			<configuration propertyfile="${hibernate.properties}">
    				<fileset dir="${resrc.dir}" includes="${hbm.pat}"/>
    				<fileset dir="@{mappings}" includes="${hbm.pat}">
    					<not><present targetdir="${resrc.dir}"/></not>
    				</fileset>
    			</configuration>
    	
    			<templates/>

    		</hibernatetool>
        </sequential>
    </macrodef>	

</project>
