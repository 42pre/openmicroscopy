<?xml version="1.0" encoding="utf-8"?>
<project name="macros" basedir="." default="">
	
    <!-- = = = = = = = = = = = = = = = = =
          build tools
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="iterate">
		<attribute name="target"/>
		<sequential>
		<iter><target name="@{target}"/></iter>
		</sequential>
	</macrodef>

	<macrodef name="iter">
		<element name="elem" implicit="yes"/>
		<attribute name="inheritAll" default="false"/>
		<attribute name="inheritRefs" default="false"/>
		<attribute name="file" default="build.xml"/>
		<sequential>
		<antRun component="dsl" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="common" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="omeio-nio" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="rendering" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="server" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="omero-ejb" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="omero-app" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="client" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		<antRun component="shoola-adapter" file="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}"><elem/> </antRun>
		</sequential>
	</macrodef>

	<macrodef name="antRun">
		<attribute name="file" default="build.xml"/>
		<attribute name="component"/>
		<attribute name="inheritAll" default="false"/>
		<attribute name="inheritRefs" default="false"/>
		<element name="targets" implicit="yes"/>
		<sequential>
		<echo> +===========================================================================================+ </echo>
		<echo> |                                                                                             </echo>
		<echo> |                                      @{component}                                           </echo>
		<echo> |                                                                                             </echo>
		<echo> +===========================================================================================+ </echo>
		<ant dir="${components.dir}/@{component}" antfile="@{file}" inheritAll="@{inheritAll}" inheritRefs="@{inheritRefs}">
			<property name="current.component" value="@{component}"/>
			<property name="multi.test.with.fail" value="${test.with.fail}"/>
			<property name="multi.test.skip" value="${test.skip}"/>
			<property name="multi.generate.skip" value="${generate.skip}"/>
			<targets/>
		</ant>
		</sequential>
	</macrodef>

 	<macrodef name="sys_test">
		<attribute name="name"/>
		<element name="tests" implicit="yes"/>
		<sequential>
                <condition
			property="check-@{name}-value"
                           value="${msg.check.@{name}}"
                           else="ok.">
			<tests/>
		</condition>
		</sequential>
	</macrodef>

	<macrodef name="svn">
		<attribute name="command"/>
		<sequential>
		<exec executable="svn" failonerror="true">
			<arg line="@{command}"/>
		</exec>
		</sequential>
	</macrodef>

	<macrodef name="mvn">
		<attribute name="targets"/>
		<attribute name="dir" default="${basedir}"/>
		<sequential>
		<exec executable="mvn" dir="@{dir}" failonerror="true">
			<arg line="@{targets}"/>
		</exec>
		</sequential>
	</macrodef>

	<macrodef name="sql_run">
		<attribute name="print" default="false"/>
		<element name="commands" implicit="yes"/>
		<sequential>
                <sql
                        driver="${hibernate.connection.driver_class}"
                        url="${hibernate.connection.url}"
                        userid="${hibernate.connection.username}"
                        password="${hibernate.connection.password}" 
			print="@{print}" 
			classpathref="omero.classpath">
			<commands/>
		</sql>
		</sequential>
	</macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          copy resource files to generated-sources          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="copyResource">
        <attribute name="file"/>
        <sequential>
			<basename property="props.file.prop" file="@{file}"/>
			<available file="@{file}" property="${props.file.prop}.exists"/>
        	<fail unless="${props.file.prop}.exists">
			${msg.macro.missing_file}
      		</fail>    
           <copy file="@{file}" todir="${resrc.dest}" failonerror="true" />
	   <copy file="@{file}" todir="${classes.dir}" failonerror="true" />
        </sequential>
    </macrodef>
	
    <!-- = = = = = = = = = = = = = = = = =
          checks if a build step is needed    
         = = = = = = = = = = = = = = = = = -->

	<macrodef name="is-done">
        <attribute name="name"/>
		<attribute name="srcdir"/>
		<attribute name="includes"/>
        <sequential>
    		<condition property="@{name}.not.required">
    		  <and>
    		  	<available file="${done.dir}/@{name}.done"/>
    			<uptodate 
    				property="@{name}.not.required"> 
    		  		<mergemapper to="${done.dir}/@{name}.done"/>
    				<srcfiles dir= "@{srcdir}" includes="@{includes}"/>
    			</uptodate>
    		  </and>
    		</condition>
        </sequential>
    </macrodef>

	<macrodef name="done">
		<attribute name="name"/>
		<sequential>
			<touch file="${done.dir}/@{name}.done"/>
		</sequential>
	</macrodef>
	
    <!-- = = = = = = = = = = = = = = = = =
          hibernate code-gen          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="hibernate">
	<attribute name="mappings" default="${resrc.dest}"/>
    	<element name="templates" implicit="yes"/>
        <sequential>
    		<hibernatetool destdir="${generated.dir}" templatepath="${resrc.dir}">
    			<classpath refid="omero.classpath"/>
    			
    			<configuration propertyfile="${hibernate.properties}">
    				<fileset dir="${resrc.dir}" includes="${hbm.pat}"/>
    				<fileset dir="@{mappings}" includes="${hbm.pat}">
    					<not><present targetdir="${resrc.dir}"/></not>
    				</fileset>
    			</configuration>
    	
    			<templates/>

    		</hibernatetool>
        </sequential>
    </macrodef>	
	
    <!-- = = = = = = = = = = = = = = = = =
          slice code-gen   
         = = = = = = = = = = = = = = = = = -->
	
	<macrodef name="run">
		<attribute name="exec"/>
		<attribute name="files"/>
		<attribute name="suffix" default=""/>
		<sequential>
		  <mkdir dir="${src.dest}/@{suffix}"/>
		  <exec executable="@{exec}" failonerror="true" logError="true">
		 	<arg value="--output-dir"/>
			<arg value="${src.dest}/@{exec}/@{suffix}"/>
			<arg value="-I${resrc.dest}"/>
			<arg line="@{files}"/>
		  </exec>            
        </sequential>
    </macrodef>
	
	<macrodef name="slice">
	   <attribute name="lang"/>
	   <attribute name="files"/>
	   <attribute name="suffix" default=""/>
	   <sequential>
	   	 <run exec="slice2@{lang}" files="${resrc.dest}/${ice.file}"/>
		 <run exec="slice2@{lang}" files="@{files}" suffix="@{suffix}"/>
	   	 <done name="slice2@{lang}"/>
	   </sequential>
	</macrodef>

</project>
