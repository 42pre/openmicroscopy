<?xml version="1.0" encoding="utf-8"?>
<project name="macros" basedir="." default="">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
  DOCUMENTATION:
  ==============================================================================
  Macros generally useful throughout the build system. No properties
  or targets are defined here. 

-->
	
    <!-- = = = = = = = = = = = = = = = = =
          build tools
         = = = = = = = = = = = = = = = = = -->

	<macrodef name="svn">
		<attribute name="command"/>
		<sequential>
		<exec executable="svn" failonerror="true">
			<arg line="@{command}"/>
		</exec>
		</sequential>
	</macrodef>

	<macrodef name="sql_run">
		<attribute name="print" default="false"/>
		<element name="commands" implicit="yes"/>
		<sequential>
                <sql
                        driver="${hibernate.connection.driver_class}"
                        url="${hibernate.connection.url}"
                        userid="${hibernate.connection.username}"
                        password="${hibernate.connection.password}" 
			print="@{print}" 
			classpathref="omero.classpath">
			<commands/>
		</sql>
		</sequential>
	</macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          checks if a build step is needed    
         = = = = = = = = = = = = = = = = = -->

	<macrodef name="is-done">
        <attribute name="name"/>
		<attribute name="srcdir"/>
		<attribute name="includes"/>
        <sequential>
	    	<uptodate property="@{name}.up.to.date"> 
    		  	<mergemapper to="${done.dir}/@{name}.done"/>
    			<srcfiles dir= "@{srcdir}" includes="@{includes}"/>
    		</uptodate>
    		<condition property="@{name}.not.required">
    		  <and>
    		  	<available file="${done.dir}/@{name}.done"/>
			<isset property="@{name}.up.to.date"/>
    		  </and>
    		</condition>
        </sequential>
    </macrodef>

	<macrodef name="done">
		<attribute name="name"/>
		<sequential>
			<touch file="${done.dir}/@{name}.done"/>
		</sequential>
	</macrodef>

      <macrodef name="makeManifest">
          <attribute name="property"/>
	  <sequential>
	  <pathconvert property="mf.classpath"
	      refid="omero.classpath" 
	      pathsep=" " dirsep="/">
	      <flattenmapper/>
          </pathconvert>
	  </sequential>
      </macrodef>

      <!-- Gather all compiled services together into a single
      services.jar.  Also, make all application jars available to the
      services.jar via the MANIFEST file *AND* add one additional
      (possibly non-extant) extensions.jar which can be created by 3rd
      parties and added to the EAR file (top-level) for runtime class
      lookups.

      services.jar is placed in the specified directory. Optionally, a
      manifest string can be specified. It defaults to the empty
      string, but a manifest can be generated via makeManifest if
      omero.classpath has been defined.-->

      <macrodef name="useServices">
          <attribute name="dir"/>
          <attribute name="manifest" default=""/>
          <sequential>
          <jar destfile="@{dir}/services.jar">
             <include name="*"/>
             <manifest>
                 <attribute name="Class-Path" value="@{manifest} extensions.jar"/>
             </manifest>
           </jar>
          </sequential>
      </macrodef>

	<!-- The hard-wiring macro is used to allowcertain method interceptors to
	be hard-wired around method exception *before* any of the "soft" 
	spring-wired interceptors (see resources/ome/services/services.xml)
	
	The values hard-wired in are the class names of subclasses of 
	ome.logic.HardWireInterceptor with a no-arg constructor. This allows
	classes unknown to the server at compile time (like those under tools/)
	to become a part of a distribution. 
	-->
	<macrodef name="hard-wire">
		<attribute name="fromdir" default="${src.dir}"/>
		<attribute name="todir" default="${src.dest}"/>
		<attribute name="file"/>
		<attribute name="token" default="@REPLACE@"/>
		<attribute name="value" default="${omero.hard-wired.interceptors}"/>
		<sequential>
                <delete file="@{todir}/@{file}"/>
                <copy todir="@{todir}">
			<fileset dir="@{fromdir}">
				<include name="@{file}"/>
			</fileset>
		</copy>
                <replace file="@{todir}/@{file}">
                        <replacefilter token="@{token}" value="@{value}"/>
                </replace>
		</sequential>
	</macrodef>

	<!-- Because this is such a common metaphor, we're writing a simple 
	hard-wiring compile macro which can be used if only one file needs to 
	be hard-wired. Otherwise, use the hard-wire macro.
	
	Must compile the files in two steps to prevent duplicate class errors 
	-->
	<macrodef name="hardWireCompile">
		<attribute name="fromdir" default="${src.dir}"/>
		<attribute name="todir" default="${src.dest}"/>
		<attribute name="pattern"/>
		<attribute name="token" default="@REPLACE@"/>
		<attribute name="value" default="${omero.hard-wired.interceptors}"/>
		<sequential>
		<hard-wire file="@{pattern}.java" 
		    token="@{token}" value="@{value}" 
		    fromdir="@{fromdir}" todir="@{todir}"/>
		<myjavac>
		  <src path="@{fromdir}"/>
		</myjavac>
		<delete file="${classes.dir}/@{pattern}.class"/>
		<myjavac>
		  <src path="@{todir}"/>
		</myjavac>
		<delete file="${src.dest}/@{pattern}.java"/>
		</sequential>
	</macrodef>
    <!-- = = = = = = = = = = = = = = = = =
          hibernate code-gen          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="hibernate">
	<attribute name="mappings" default="${resrc.dest}"/>
    	<element name="templates" implicit="yes"/>
        <sequential>
    		<hibernatetool destdir="${generated.dir}" templatepath="${resrc.dir}">
    			<classpath refid="omero.classpath"/>

    			<configuration propertyfile="${hibernate.properties}">
    				<fileset dir="${resrc.dir}" includes="${hbm.pat}"/>
    				<fileset dir="@{mappings}" includes="${hbm.pat}">
    					<not><present targetdir="${resrc.dir}"/></not>
    				</fileset>
    			</configuration>
    	
    			<templates/>

    		</hibernatetool>
        </sequential>
    </macrodef>	

</project>
