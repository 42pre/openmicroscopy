<?xml version="1.0" encoding="utf-8"?>
<project name="macros" basedir="." default="">
	
    <!-- = = = = = = = = = = = = = = = = =
          build tools
         = = = = = = = = = = = = = = = = = -->
	<macrodef name="iterate">
		<attribute name="target"/>
		<sequential>
		<antRun component="common">    <target name="@{target}"/> </antRun>
		<antRun component="server">    <target name="@{target}"/> </antRun>
		<antRun component="omeio-nio"> <target name="@{target}"/> </antRun>
		<antRun component="rendering"> <target name="@{target}"/> </antRun>
		<antRun component="client">    <target name="@{target}"/> </antRun>
		<antRun component="shoola-adapter"><target name="@{target}"/> </antRun>
		</sequential>
	</macrodef>

	<macrodef name="sys_test">
		<attribute name="name"/>
		<element name="tests" implicit="yes"/>
		<sequential>
                <condition
			property="check-@{name}-value"
                           value="${msg.check.@{name}}"
                           else="ok.">
			<tests/>
		</condition>
		</sequential>
	</macrodef>

	<macrodef name="svn">
		<attribute name="command"/>
		<sequential>
		<exec executable="svn" failonerror="true">
			<arg line="@{command}"/>
		</exec>
		</sequential>
	</macrodef>

	<macrodef name="antRun">
		<attribute name="component"/>
		<element name="targets" implicit="yes"/>
		<sequential>
		<echo> ================================= Running @{component}...  ================================= </echo>
		<ant dir="${components.dir}/@{component}" inheritAll="false" inheritRefs="false">
			<property name="test.skip" value="${test.skip}"/>
			<property name="generate.skip" value="${generate.skip}"/>
			<targets/>
		</ant>
		</sequential>
	</macrodef>

	<macrodef name="mvn">
		<attribute name="targets"/>
		<attribute name="dir" default="${basedir}"/>
		<sequential>
		<exec executable="mvn" dir="@{dir}" failonerror="true">
			<arg line="@{targets}"/>
		</exec>
		</sequential>
	</macrodef>

	<macrodef name="sql_run">
		<attribute name="print" default="false"/>
		<element name="commands" implicit="yes"/>
		<sequential>
                <sql
                        driver="${hibernate.connection.driver_class}"
                        url="${hibernate.connection.url}"
                        userid="${hibernate.connection.username}"
                        password="${hibernate.connection.password}" 
			print="@{print}" 
			classpathref="omero.classpath">
			<commands/>
		</sql>
		</sequential>
	</macrodef>

        <macrodef name="antClasspath">
                <sequential>
                <groovy><![CDATA[
                genresrc  = properties["resrc.dest"]   
                group     = properties["mvn.group"]   
                artifact  = properties["mvn.artifact"]   
                version   = properties["mvn.version"]   
                packaging = properties["mvn.packaging"]   
                new File("${genresrc}/classpath.xml").withOutputStream{|o|

		  repo = "repository/"
		  def entry = {|x|
		    if (x.contains(repo))  {
		      path = x.substring(x.lastIndexOf(repo)+repo.length())
		      o << """\n\t<file name="${path}"/>"""
                    }
		  }

		  def get = {|x|
		    if (x.contains(repo))  {
		      path = x.substring(x.lastIndexOf(repo)+repo.length())
		      o << """\n\t<get src="\${omero.repo.remote}/${path}" dest="\${omero.repo.local}/${path}" usetimestamp="true"/>"""
                    }
		  }

		  o << """
<!-- Code-generated ant classpath for ${artifact} component -->
<project name="${artifact}_classpath" default="classpath-generate" basedir=".">
  <property name="artifact.name" value="${artifact}"/>
  <property name="artifact.group" value="${group}"/>
  <property name="artifact.version" value="${version}"/>
  <property name="artifact.packaging" value="${packaging}"/>
  <property name="artifact.final.name" value="${artifact}-${version}.${packaging}"/>
  <property name="artifact.path" value="${group}/${artifact}/${version}/\${artifact.final.name}"/>
  <path id="generated.compile.classpath">
    <filelist dir="\${omero.repo.local}">"""

		  properties["compile.path"].split(":").each(entry)

		  o << """
    </filelist>
  </path>
  <path id="generated.test.classpath">
    <filelist dir="\${omero.repo.local}">"""

		  properties["test.path"].split(":").each(entry)

		  o << """
    </filelist>
  </path>

  <target name="classpath-download">"""

		  properties["omero.path"].split(":").each(get)

		o << """
  </target>
</project>"""
		}
                ]]></groovy>
                </sequential>
        </macrodef>

	<macrodef name="eclipseClasspath">
		<sequential>
                <groovy><![CDATA[
		src      = properties["src.dir"]	
		resrc    = properties["resrc.dir"]	
		gensrc   = properties["src.dest"]	
		genresrc = properties["resrc.dest"]	
		test     = properties["test.dir"]
		classrel = properties["classes.rel"]
		basedir  = properties["basedir"]	
                new File("${genresrc}/.classpath").withOutputStream{|o|
                        def entryMaker = {|extras|
                          return {|path|
			    path = path.substring(basedir.size()+1,path.size())
                            f = new File(path)
                            if (f.isDirectory())
                              o << """\t<classpathentry excluding="**/.svn" kind="src" path="${path}" ${extras}/>\n"""
                          }
                          
                        }
                        o << "<classpath>\n"
                        o << """\t<classpathentry kind="output" path="${classrel}"/>\n"""
                        o << """\t<classpathentry kind="var" rootpath="JRE_SRCROOT" path="JRE_LIB" sourcepath="JRE_SRC"/>\n"""

                        // 
                        [src,resrc,gensrc,genresrc].each(entryMaker(""))
                        [test].each(entryMaker("output=\"target/test-classes\""))

			paths = []
                        properties["omero.path"].split(":").each{ |x|
                          repo = "repository/"
                          if (x.contains(repo))  {
                            paths << x.substring(x.lastIndexOf(repo)+repo.length())
                          }
                        }

			paths.sort().each{|path|
                          o << """\t<classpathentry kind="var" path="M2_REPO/${path}"/>\n"""
			}
                        o << "</classpath>\n"
                }
                ]]></groovy>
		</sequential>
	</macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          copy resource files to generated-sources          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="copyResource">
        <attribute name="file"/>
        <sequential>
			<basename property="props.file.prop" file="@{file}"/>
			<available file="@{file}" property="${props.file.prop}.exists"/>
        	<fail unless="${props.file.prop}.exists">
			${msg.macro.missing_file}
      		</fail>    
           <copy file="@{file}" todir="${resrc.dest}" failonerror="true" />
	   <copy file="@{file}" todir="${classes.dir}" failonerror="true" />
        </sequential>
    </macrodef>
	
    <!-- = = = = = = = = = = = = = = = = =
          checks if a build step is needed    
         = = = = = = = = = = = = = = = = = -->

	<macrodef name="is-done">
        <attribute name="name"/>
		<attribute name="srcdir"/>
		<attribute name="includes"/>
        <sequential>
    		<condition property="@{name}.not.required">
    		  <and>
    		  	<available file="${done.dir}/@{name}.done"/>
    			<uptodate 
    				property="@{name}.not.required"> 
    		  		<mergemapper to="${done.dir}/@{name}.done"/>
    				<srcfiles dir= "@{srcdir}" includes="@{includes}"/>
    			</uptodate>
    		  </and>
    		</condition>
        </sequential>
    </macrodef>

	<macrodef name="done">
		<attribute name="name"/>
		<sequential>
			<touch file="${done.dir}/@{name}.done"/>
		</sequential>
	</macrodef>
	
    <!-- = = = = = = = = = = = = = = = = =
          hibernate code-gen          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="hibernate">
	<attribute name="mappings" default="${resrc.dest}"/>
    	<element name="templates" implicit="yes"/>
        <sequential>
    		<hibernatetool destdir="${generated.dir}" templatepath="${resrc.dir}">
    			<classpath refid="omero.classpath"/>
    			
    			<configuration propertyfile="${hibernate.properties}">
    				<fileset dir="${resrc.dir}" includes="${hbm.pat}"/>
    				<fileset dir="@{mappings}" includes="${hbm.pat}">
    					<not><present targetdir="${resrc.dir}"/></not>
    				</fileset>
    			</configuration>
    	
    			<templates/>

    		</hibernatetool>
        </sequential>
    </macrodef>	
	
    <!-- = = = = = = = = = = = = = = = = =
          slice code-gen   
         = = = = = = = = = = = = = = = = = -->
	
	<macrodef name="run">
		<attribute name="exec"/>
		<attribute name="files"/>
		<attribute name="suffix" default=""/>
		<sequential>
		  <mkdir dir="${src.dest}/@{suffix}"/>
		  <exec executable="@{exec}" failonerror="true" logError="true">
		 	<arg value="--output-dir"/>
			<arg value="${src.dest}/@{exec}/@{suffix}"/>
			<arg value="-I${resrc.dest}"/>
			<arg line="@{files}"/>
		  </exec>            
        </sequential>
    </macrodef>
	
	<macrodef name="slice">
	   <attribute name="lang"/>
	   <attribute name="files"/>
	   <attribute name="suffix" default=""/>
	   <sequential>
	   	 <run exec="slice2@{lang}" files="${resrc.dest}/${ice.file}"/>
		 <run exec="slice2@{lang}" files="@{files}" suffix="@{suffix}"/>
	   	 <done name="slice2@{lang}"/>
	   </sequential>
	</macrodef>

</project>
