<?xml version="1.0" encoding="utf-8"?>
<project name="lifecycle" default="help" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
# 
# Copyright 2006 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
  DOCUMENTATION:
  ==============================================================================
  Provides lifecycle targets similar to those found in maven. See
  http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

  Each target stair-steps down to prepare:
  dist->integration->install->package->test->compile->generate->prepare

-->

	<target name="help">
		<echo>
			This build file is intended for import only.
		</echo>
	</target>

	<target name="load-groovy">
		<available property="groovy-exists" classname="org.codehaus.groovy.ant.Groovy" classpathref="omero.classpath" />
		<fail unless="groovy-exists" message="Groovy ${msg.macro.missing_fail}"/>

		<!-- http://groovy.codehaus.org/Ant+Task+Troubleshooting -->
		<taskdef name="rootLoaderRef" classname="org.codehaus.groovy.ant.RootLoaderRef" classpathref="omero.classpath"/>
		<rootLoaderRef ref="groovy.classpath">
			<classpath refid="omero.classpath"/>
		</rootLoaderRef>
		<taskdef classname="org.codehaus.groovy.ant.Groovy" loaderref="groovy.classpath" name="groovy"/>
	</target>

	<target name="quick" description="Turn off tests">
		<property name="config.skip" value="true"/>
		<property name="test.skip" value="true"/>
		<property name="generate.skip" value="true"/>
	</target>

	<target name="nochecks" description="Turn off checks">
		<property name="checks.skip" value="true"/>
	</target>

	<target name="fail-on-error" description="Fail if tests do not pass">
		<property name="test.with.fail" value="true"/>
	</target>

	<target name="setup-db" depends="prepare" description="Creates and installs the OMERO db in a fresh database">
		<java classname="ome.security.PasswordUtil" outputproperty="ROOTPASS" classpathref="omero.classpath">
			<arg value="${omero.rootpass}"/>
		</java>
		<copy file="${sql.dir}/schema.sql" tofile="${target.dir}/ddl.sql"  overwrite="true"/>
                <copy file="${sql.dir}/data.sql"   tofile="${target.dir}/data.sql"  overwrite="true"/>
                <copy file="${sql.dir}/views.sql"   tofile="${target.dir}/views.sql"  overwrite="true"/>
                <replace file="${target.dir}/data.sql" token="@ROOTPASS@" value="${ROOTPASS}"/>
                <replace file="${target.dir}/data.sql" token="@DBPATCH@" value="${omero.db.patch}"/>
                <replace file="${target.dir}/data.sql" token="@DBVERSION@" value="${omero.db.version}"/>
                <sql_run>
                        <transaction src="${target.dir}/ddl.sql"/>
                        <transaction src="${target.dir}/data.sql"/>
                        <transaction src="${target.dir}/views.sql"/>
                </sql_run>
	</target>

	<target name="prepare" depends="deps-retrieve">
<!--
		<available file="${deps.lib.dir}" property="deps.lib.dir.needed"/>
		<antcall target="deps-retrieve" inheritrefs="true"/>
-->
                <defineVariables/>
		<makeDirectories/>
		<copyResource file="${root.dir}/etc/local.properties"/>
		<copyResource file="${root.dir}/etc/omero.properties"/>
		<copyResource file="${root.dir}/etc/hibernate.properties"/>
		<copyResource file="${root.dir}/etc/log4j.xml"/>
		<!-- Used (at least) by server.xml and omero.xml -->
                <property name="omero.db.url" value="jdbc:postgresql://${omero.db.host}/${omero.db.name}"/>
		<presetdef name="sql_run">
			<sql
				driver="${omero.db.driver}"
				url="${omero.db.url}"
				userid="${omero.db.user}"
				password="${omero.db.pass}"
				print="false"
                                delimiter=";;"
				classpathref="omero.classpath">
			</sql>
		</presetdef>
		<taskdef resource="emma_ant.properties" classpathref="omero.classpath" />
	</target>

	<target name="generate" depends="prepare">
                <pathconvert property="omero.path" refid="omero.classpath"/>
                <echo file="${resrc.dest}/Classpath.sh">
                  export CLASSPATH=${omero.path}
                </echo>
		<copyResources/>
	</target>

	<!-- javac macro which can contain any number of path
	elements for compilation. Usually src.dir and src.dest
	will need to be compiled together because of inter-
	dependencies -->
	<macrodef name="myjavac">
	        <attribute name="destdir" default="${classes.dir}"/>
	        <attribute name="classpathref" default="omero.classpath"/>
	        <element name="srcelements" implicit="yes"/>
		<sequential>
		<javac
			fork="yes"
			destdir="@{destdir}"
			classpathref="@{classpathref}"
			sourcepath=""
			source="${javac.source}"
			target="${javac.target}"
			debug="${javac.debug}"
			debuglevel="${javac.debuglevel}"
                        deprecation="on"
			memoryMaximumSize="${javac.maxmem}"
		>
		        <srcelements/>
		</javac>
		</sequential>
	</macrodef>

	<target name="compile" depends="generate" unless="skip.compile">
		<myjavac>
		  <src path="${src.dir}"/>
		  <src path="${src.dest}"/>
		</myjavac>
	</target>

	<target name="testng-init" unless="test.skip">
		<taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="omero.test.classpath"/>
	</target>

	<macrodef name="suite">
		<element name="files" implicit="yes"/>
		<sequential>
		<testng outputDir="${testreports.dir}"
			haltonfailure="${test.with.fail}"
			haltonskipped="${test.with.fail}"
			>
 			<classpath>
				<pathelement location="${emmaclasses.dir}"/>
				<path refid="omero.test.classpath"/>
				<pathelement location="${testclasses.dir}"/>
				<pathelement location="${classes.dir}"/>
			</classpath>
			<files/>
			<jvmarg value="-Demma.coverage.out.file=${target.dir}/coverage.emma" />
		</testng>
		</sequential>
	</macrodef>


	<target name="test" depends="compile,testng-init" unless="test.skip">
		<!-- may be overriden by fail-on-error -->
		<property name="test.with.fail" value="false"/>
		<property name="emma.enabled"   value="true"/>
	        <property name="unit.suite" value="unit.testng.xml"/>
		<copyTestResources/>
		<javac 
			fork="yes"
			debug="on"
			destdir="${testclasses.dir}"
			classpathref="omero.test.classpath" >
			<src path="${test.dir}"/>
		</javac>
		<path id="emma.classpath">
			<pathelement location="${classes.dir}"/>
		</path>
		<emma enabled="${emma.enabled}" >
			<instr instrpathref="emma.classpath"
				destdir="${emmaclasses.dir}"
				metadatafile="${target.dir}/metadata.emma"
				merge="true"
			/>
		</emma>
		<suite>
			<xmlfileset dir="${test.dir}">
				<include name="${unit.suite}"/>
			</xmlfileset>
		</suite>
		<emma enabled="${emma.enabled}" >
			<report sourcepath="${src.dir}" >
				<fileset dir="${target.dir}" includes="*.emma"/>
				<html outfile="${target.dir}/coverage.html" />
				<xml outfile="${target.dir}/coverage.xml" />
			</report>
		</emma>
	</target>
		
	<target name="junittest" depends="compile" unless="test.skip">
		<copyTestResources/>
		<javac 
			fork="yes"
			destdir="${testclasses.dir}"
			classpathref="omero.classpath" >
			<src path="${test.dir}"/>
		</javac>
		<junit 
			printsummary="withOutAndErr" 
			haltonfailure="${test.with.fail}"
			fork="on"
			forkmode="perTest"
			>
 			<classpath>
				<path refid="omero.classpath"/>
				<pathelement location="${testclasses.dir}"/>
			</classpath>

			<formatter type="plain"/>

			<batchtest todir="${testreports.dir}">
				<fileset dir="${testclasses.dir}">
					<include name="**/*Test.class"/>
					<include name="**/*Tests.class"/>
					<exclude name="**/AllTests.class"/>
					<exclude name="**/Abstract*.class"/>
					<!--exclude name="**/itests/**/*"/-->
					<exclude name="**/dbtests/**/*"/>
				</fileset>
			</batchtest>
		</junit> 
	</target>

	<target name="package" depends="test">
		<pathconvert property="mf.classpath"
			refid="omero.classpath"
			pathsep=" " dirsep="/">
			<flattenmapper/>
		</pathconvert>
                <property name="mf.classpath.and.jars" value="${mf.classpath} services.jar extensions.jar"/>
		<jar destfile="${target.dir}/${ivy.module}.jar">
			<manifest>
				<attribute name="Class-Path" value="${mf.classpath.and.jars}"/>
				<attribute name="Main-Class" value="${main.class}"/>
			</manifest>
			<fileset dir="${classes.dir}">
				<exclude name="*.properties"/>
				<exclude name="log4j.xml"/>
				<exclude name="**/*.cpp"/>
				<exclude name="**/*.h"/>
			</fileset>
		</jar>
	</target>

	<target name="load-findbugs" depends="prepare">
		<property name="findbugs.path"   value="omero.classpath"/>
		<property name="findbugs.type"   value="jar"/>
		<property name="findbugs.target" value="${target.dir}/${ivy.module}.${findbugs.type}"/>
		<property name="findbugs.home"   value="${omero.home}/lib/findbugs-${versions.findbugs}"/>
		<taskdef name="find-bugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="omero.classpath"/>
		<taskdef resource="checkstyletask.properties" classpathref="omero.classpath"/>
		<condition property="no.findbugs"><not><available file="${findbugs.target}"/></not></condition>
		<macrodef name="do-find-bugs">
			<sequential>
			<find-bugs home="${findbugs.home}" output="xml:withMessages" outputFile="${target.dir}/findbugs.xml"
                                   excludeFilter="${import.dir}/excludebugs.xml">
				<class location="${findbugs.target}" />
				<auxClasspath>
					<path refid="${findbugs.path}"/>
				</auxClasspath>
				<sourcePath>
					<path>
						<pathelement location="${src.dir}"/>
						<pathelement location="${src.dest}"/>
					</path>
				</sourcePath> 
			</find-bugs>
			</sequential>
		</macrodef>
		<macrodef name="do-checkstyle">
			<sequential>
			<checkstyle config="${omero.home}/docs/styles/checkstyle.xml" failOnViolation="false">
				<fileset dir="${basedir}" includes="**/*.java"/>
				<formatter type="xml" toFile="${target.dir}/checkstyle.xml"/>
			</checkstyle>
			</sequential>
		</macrodef>
	</target>

	<target name="findbugs" description="Run findbugs on components' jar" depends="load-findbugs" unless="no.findbugs">
		<do-find-bugs/>
		<do-checkstyle/>
	</target>

	<target name="install" depends="package,deps-publish-local"/>

	<target name="integration" depends="install" unless="test.skip">
		<!-- may be overriden by fail-on-error -->
		<property name="test.with.fail" value="false"/>
		<property name="integration.suite" value="integration.testng.xml"/>
		<suite>
			<xmlfileset dir="${test.dir}">
				<include name="${integration.suite}"/>
			</xmlfileset>
		</suite>
	</target>

	<!-- Previously dependend on integration, but that may need special controls.
	For the time being, depenending solely on "install" -->
	<target name="dist" depends="install">
		<!-- empty by default -->
	</target>

	<target name="clean">
		<delete dir="${target.dir}"/>
	</target>

	<!-- NON-LIFECYCLE HELPER TARGETS -->

	<target name="strict-test" depends="fail-on-error,clean-tests,test"/>

	<target name="clean-tests">
		<delete dir="${testclasses.dir}"/>
		<delete dir="${testreports.dir}"/>
	</target>

	<target name="refresh" if="eclipse.running">
		<eclipse.refreshLocal resource="omero-dsl" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-common" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-server" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-client" depth="infinite"/>
		<eclipse.refreshLocal resource="omero-shoola-adapter" depth="infinite"/>
		<eclipse.refreshLocal resource="missing" depth="infinite"/>
	</target>

    <!-- MACROS -->

    <macrodef name="standalone">
        <attribute name="conf"/>
        <attribute name="dir" default="${basedir}/target/standalone/"/>
        <attribute name="pattern" default="[module].[ext]"/>
        <attribute name="jar" default="@{dir}/${ivy.module}.jar"/>
        <sequential>
            <ivy:retrieve conf="@{conf}" pattern="@{dir}/@{pattern}" log="quiet"/>
            <copy file="${target.dir}/${ivy.module}.jar" tofile="@{jar}"/>
            <jar update="true" destfile="@{jar}">
		<manifest>
			<!-- This is a copy of the classpath used under package but includes ../etc/ to allow
                        reading from dist/etc on startup -->
			<attribute name="Class-Path" value="../etc/ ${mf.classpath.and.jars}"/>
		</manifest>
                <fileset dir="${resrc.dir}">
                    <include name="**/config.*"/>
                    <include name="**/*.config"/>
                    <include name="**/*.xml"/>
                </fileset>
            </jar>
        </sequential>
  </macrodef>

    <macrodef name="copyResource">
        <attribute name="file"/>
        <sequential>
           <basename property="props.file.prop" file="@{file}"/>
           <copy file="@{file}" todir="${resrc.dest}" failonerror="true" />
           <copy file="@{file}" todir="${classes.dir}" failonerror="true" />
        </sequential>
    </macrodef>

</project>

