<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright (C) 2005 Open Microscopy Environment
#       Massachusetts Institue of Technology,
#       National Institutes of Health,
#       University of Dundee
#
#
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore <josh.moore@gmx.de>
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--

	Configuration of client proxies. Probably most important for this configuration
  is the replacement of properties (e.g. "${omero.user}"). The placeholderConfig
  bean below reads in omero.properties and jndi.properties (issuing an
  informative warning if not found). It then looks up the same properties in
  the System properties allowing these properties to override the property
  files. This is done at context creation.
  
  After that initialization ("bean post processing") stage is done, the other
  beans can be retrieved from the context with omeroContext.getBean("beanName"),
  though in most cases it will be simpler to use the methods on 
  ome.system.ServiceFactory
  
  What is returned by these methods is a Jndi-found RMI proxy wrapped in any 
  number of AOP interceptors to handle unit-of-work configuration, caching, or
  lazy-initialization.
 
  This context also configures an ome.system.Principal for proper login, but this
  can just as well be configured in code.
  
-->

	<beans>	

  <!-- property placeholder post-processor -->
	<bean id="placeholderConfig"
              class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    <property name="ignoreResourceNotFound" value="true"/>
		<property name="locations">
		<list>
			<value>classpath:omero.properties</value>
 			<value>classpath:jndi.properties</value>
		</list>
		</property>
	</bean>
	
  <!-- properly configured principal for login -->
	<bean id="principal" class="ome.system.Principal">
		<constructor-arg index="0" value="${omero.user}"/>
		<constructor-arg index="1" value="${omero.group}"/>    
		<constructor-arg index="2" value="${omero.event}"/>        
	</bean>

  <!-- hashtable for InitialContext constructor -->
  <bean id="env" class="java.util.Hashtable">
    <constructor-arg>
      <map>
        <entry key="java.naming.security.principal" value-ref="principal"/>
        <entry key="java.naming.security.credentials" value="${omero.pass}"/>
        <entry key="java.naming.factory.initial" value="${java.naming.factory.initial}"/>
        <entry key="java.naming.factory.url.pkgs" value="${java.naming.factory.url.pkgs}"/>
        <entry key="java.naming.provider.url" value="${java.naming.provider.url}"/>
      </map>
    </constructor-arg>
  </bean>
    
  <!-- jndi parent class -->
  <bean id="jndi" abstract="true"
    class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiEnvironment" ref="env"/>
    <property name="lookupOnStartup" value="false"/>    
  </bean>
		
  <!--
      SERVICES
  -->
  <bean id="analysisService" parent="jndi">
    <property name="jndiName" value="omero/remote/ome.api.IAnalysis"/>
    <property name="proxyInterface" value="ome.api.IAnalysis"/>
  </bean>

  <bean id="pixelsService" parent="jndi">
    <property name="jndiName" value="omero/remote/ome.api.IPixels"/>
    <property name="proxyInterface" value="ome.api.IPixels"/>
  </bean>

  <bean id="pojosService" parent="jndi">
    <property name="jndiName" value="omero/remote/ome.api.IPojos"/>
    <property name="proxyInterface" value="ome.api.IPojos"/>
  </bean>

  <bean id="renderService" parent="jndi">
    <property name="jndiName" value="omero/remote/omeis.providers.re.RenderingEngine"/>
    <property name="proxyInterface" value="omeis.providers.re.RenderingEngine"/>
    <property name="cache" value="false"/>
  </bean>

  <bean id="queryService" parent="jndi">
    <property name="jndiName" value="omero/remote/ome.api.IQuery"/>
    <property name="proxyInterface" value="ome.api.IQuery"/>
  </bean>

  <bean id="updateService" parent="jndi">
    <property name="jndiName" value="omero/remote/ome.api.IUpdate"/>
    <property name="proxyInterface" value="ome.api.IUpdate"/>
  </bean>
        
</beans>
