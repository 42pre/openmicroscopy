#set ($file = "client.vm") 

#if( $package )
  package ${package}.client;
  import ${package}.interfaces.*;
#else
  import interfaces.*;  
#end
  import java.util.HashMap;

/** autogenerated by Velocity template $file */

public class ${class.LocalName}
#if ($class.SuperClass)
   extends ${class.SuperClass.LocalName} 
#end
   implements I${class.LocalName} 
{

	public String getURI(){
		return I${class.LocalName}.URI;
	}
	
	private HashMap oldValues = new HashMap();
	private boolean clean = true;

#foreach( $p in $class.Predicates )
 	//-----------------------------------
	// $p
	#set ( $t = $p.Type )
	#set ( $n = $p.LocalName )
	$t $n ;
	public $t get${util.uc(${n})}(){
		return $n;
	}
	public boolean set${util.uc(${n})}($t value){
		if (!oldValues.containsKey("$n")){
		  oldValues.put("$n",this.get${util.uc(${n})}());
		}
		this.$n = value;
		clean=false;
		return true;
	}

#end

	//=============================================
	//=============================================

	public void commit() 
//	  throws UpddateConflictException, RMIException 
{
//		RemoteService.update(this);
		clean=true;
	}

	public void rollback(){
		if (!clean){
#foreach( $p in $class.Predicates )
#set ( $n = $p.LocalName )
#set ( $t = $p.Type )
		if (oldValues.containsKey("$n")){
			this.$n = ($t) oldValues.get("$n");
		}
#end
		}
		clean=true;
	}
}
