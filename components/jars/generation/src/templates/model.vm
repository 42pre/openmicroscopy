#set ($file = "model.vm") 

#if( $package )
  package ${package}.model;
#end
  import java.util.HashMap;

/** autogenerated by Velocity template $file */

public class ${class.LocalName}
#if ($class.SuperClass)
#set ($super = $class.SuperClass)
   extends ${super.LocalName} 
#else
   extends AbstractLSObject
#end
   implements I${class.LocalName},LSObject
{

	public static final double ontologyVersion = $version ;
	private HashMap oldValues = new HashMap();
	private boolean clean = true;

	public String getURI(){
		return I${class.LocalName}.URI;
	}

	public $class.LocalName (LSID lsid){
		super(lsid);
	}
	
	/** copy constructor FIXME now must have get an set logic matching!!! */
	public $class.LocalName (LSObject lsObj){
		super(lsObj.getLSID());
		this.map=lsObj.getMap();

		#foreach( $p in $class.Predicates )
	 	//-----------------------------------
		// $p
		#set ( $t = $p.Type )
		#set ( $n = $p.LocalName )
		this.set${util.uc(${p.LocalName})}(($t)lsObj.get("${p.URI}")); 
#end
	}

#foreach( $p in $class.Predicates )
 	//-----------------------------------
	// $p
	#set ( $t = $p.Type )
	#set ( $n = $p.LocalName )
	$t $n ;
	public $t get${util.uc(${n})}(){
		return $n;
	}
	public boolean set${util.uc(${n})}($t value){
		if (!oldValues.containsKey("$n")){
		  oldValues.put("$n",this.get${util.uc(${n})}());
		}
		this.$n = value;
		clean=false;
		return true;

	}
#end

    public boolean put(String str, Object obj){
	  boolean value = false;

	  if (null != str){
#foreach( $p in $class.Predicates )
#set ( $t = $p.Type )
#set ( $n = $p.LocalName )
    	  if (str.equals("$p.URI")) {
    	     this.set${util.uc(${n})}(($t)obj);
    	     value = true;
	      } else
#end
          {
       		 value = super.put(str,obj);
	      }
	   }
	   return value;
    }

	//=============================================
	//=============================================

	public void commit() 
//	  throws UpddateConflictException, RMIException TODO
{
//		RemoteService.update(this);
		clean=true;
	}

	public void rollback(){
		if (!clean){
#foreach( $p in $class.Predicates )
#set ( $n = $p.LocalName )
#set ( $t = $p.Type )
		if (oldValues.containsKey("$n")){
			this.$n = ($t) oldValues.get("$n");
		}
#end
		}
		clean=true;
	}
}

