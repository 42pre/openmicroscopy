#set ($file = "model.vm") 

#if( $package )
  package ${package}.model;
#end

/** autogenerated by Velocity template $file */

/*
 * When possible avoid calling methods on Velocity objects
 * and use existing _Java_ interface methods. E.g. 
 *
 *    Vocabulary.<pred> rather than "$p.URI". 
 *
 * This means try to make templates look as close to Java code,
 * i.e. as few dollar signs and raw strings, as possible.
 */

public class ${class.LocalName}
#if ($class.SuperClass)
#set ($super = $class.SuperClass)
   extends ${super.LocalName} 
#else
   extends AbstractLSObject
#end
   implements I${class.LocalName},LSObject
{

	public static final double ontologyVersion = $version ;

	public String getURI(){
		return I${class.LocalName}.URI;
	}

	public $class.LocalName (LSID lsid){
		super(lsid);
	}
	
	public $class.LocalName (LSObject lsObj){
		super(lsObj);
	}	

#foreach( $p in $class.Predicates )
 	//-----------------------------------
	// $p
	#set ( $t = $p.Type )
	#set ( $n = $p.LocalName )
	public $t get${util.uc(${n})}(){
		return ($t) currentValues.get(Vocabulary.$n);
	}
	
	public boolean set${util.uc(${n})}($t value){
		if (!oldValues.containsKey(Vocabulary.$n)){
		  oldValues.put(Vocabulary.$n,this.get${util.uc(${n})}());
		}
		// FIXME VALIDATION 
		currentValues.put(Vocabulary.$n,value);
		clean=false;
		return true;
	}
#end

    public boolean put(String str, Object obj){
	  boolean value = false;

	  if (null != str){
#foreach( $p in $class.Predicates )
#set ( $t = $p.Type )
#set ( $n = $p.LocalName )
    	  if (str.equals(Vocabulary.$n)) {
    	     this.set${util.uc(${n})}(($t)obj);
    	     value = true;
	      } else
#end
          {
       		 value = super.put(str,obj);
	      }
	   }
	   return value;
    }

	//=============================================
	//=============================================

	public boolean save() 
//	  throws UpddateConflictException, RMIException TODO
{
   		return super.save();
	}

	public boolean reset(){
#foreach( $p in $class.Predicates )
#set ( $n = $p.LocalName )
#set ( $t = $p.Type )
		if (oldValues.containsKey(Vocabulary.$n)){
	   		this.set${util.uc(${n})}(($t) oldValues.get(Vocabulary.$n)) ;
	   		oldValues.remove(Vocabulary.$n);
	    }
#end
		return super.reset();
	}
}

