<?xml version="1.0" encoding="utf-8"?>
<project name="OmeroJava" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
#
# Copyright 2008 Glencoe Software, Inc. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore, josh at glencoesoftware.com
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-->
    <description>
    OmeroJava interface to OmeroBlitz, provides user-friendly gateway.
    </description>

    <dirname property="up-two" file="${basedir}"/>
    <dirname property="up-one" file="${up-two}"/>
    <property name="import.dir"       value="${up-one}/antlib/resources"/>

    <import file="${import.dir}/global.xml"/>
    <import file="${import.dir}/lifecycle.xml"/>

    <defineVariables/>
    <import file="../common.xml"/>
    <target name="slice">
        <echo>no-op</echo>
    </target>

    <target name="pre-compile" depends="generate">
        <!-- These first tasks are "pseudo-compiles" copying in
        resources from other builds and jars to be packaged into
        the super jar -->
        <copy todir="${classes.dir}">
	    <fileset dir="${resrc.dest}">
	        <include name="omero.properties"/>
	    </fileset>
            <fileset dir="${blitz.comp}/target/classes">
                <include name="omero/**/*.class"/>
                <exclude name="omero/**/_*Tie.class"/>
                <exclude name="omero/_*Del*.class"/>
                <exclude name="omero/model/_*Del*.class"/>
                <exclude name="omero/sys/_*Del*.class"/>
                <!--
                <exclude name="omero/sys/_*DelD.class"/>
                <exclude name="omero/sys/_*DelD$*.class"/>
                -->
                <exclude name="omero/internal/**"/>
            </fileset>
            <fileset dir="${common.comp}/target/classes">
                <include name="ome/system/UpgradeCheck.class"/>
                <include name="ome/system/Pref*.class"/>
            </fileset>
            <fileset dir="${model.comp}/target/classes">
                <include name="ome/model/IObject.class"/>
                <include name="ome/model/ModelBased.class"/>
                <include name="ome/model/internal/*.class"/>
                <!-- Possible only need the following, but adding util
                classes for now
                 <include name="ome/util/Filterable.class"/>
                 <include name="ome/util/Filter.class"/>
                 <include name="ome/util/ModelMapper.class"/>
                 <include name="ome/util/ReverseModelMapper.class"/>
                 <include name="ome/util/Utils.class"/>
                -->
                <include name="ome/util/*.class"/>
                <include name="ome/conditions/**/*.class"/>
            </fileset>
        </copy>
    </target>

    <target name="compile" depends="pre-compile,lifecycle.compile"/>

    <target name="package" depends="compile"> <!-- depending on compile like lifecycle.package does -->
        <copy file="${target.dir}/libs/ice.jar" tofile="${target.dir}/${ivy.module}.jar"/>
	<jar update="true" destfile="${target.dir}/${ivy.module}.jar">
            <manifest>
                <attribute name="Class-Path" value=""/>
                <attribute name="Main-Class" value=""/>
            </manifest>
            <fileset dir="${classes.dir}" includes="**/*.class,omero.properties"/>
        </jar>
    </target>

    <target name="tools-init"/>

    <target name="tools-build" depends="tools-init,install" description="Creates all artifacts for tools/target"/>

    <target name="tools-dist" depends="tools-build" description="Copy artifacts to tools/target"/>

    <target name="tools-clean" depends="clean">
	<delete dir="${basedir}/target"/>
    </target>

</project>
