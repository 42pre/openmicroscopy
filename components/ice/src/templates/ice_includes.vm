/*
 *   $Id$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 */

##########################################################################
#macro(moduleStart $pkg)
#set( $pkgNew = $pkg.replaceFirst("package","").replaceAll(";","").replaceAll(" ","") )
#set( $pkgdot = "${pkgNew}." )$pkgdot.replaceAll('(.*?)[.]','module $1 { ')#end
##########################################################################
#macro(moduleStop $pkg)
#set( $pkgNew = $pkg.replaceFirst("package","").replaceAll(";","").replaceAll(" ","") )
#set( $pkgdot = "${pkgNew}." )$pkgdot.replaceAll('(.*?)[.]','};')#end
##########################################################################
#macro(classBody $pojo)
#foreach($property in  $pojo.allPropertiesIterator)
#set( $fulltype = $c2j.getJavaTypeName($property,false) ) ## , $generics)
#set( $type = $c2j.unqualify($fulltype) )
#set( $field = $property.name )
#if( $fulltype.endsWith("java.util.List") || $fulltype.endsWith("java.util.Set") || $type.contains("[]"))
	
sequence<string> ${pojo.declarationName}Remote${field}Seq;

#end
#end

class ${pojo.declarationName}Remote
{
#foreach($property in $pojo.allPropertiesIterator)
#set( $fulltype = $c2j.getJavaTypeName($property,false) ) ## , $generics)
#set( $type = $c2j.unqualify($fulltype) )
#set( $field = $property.name )
	//  $pojo.importType( $fulltype ) $property.name;
#if( $type == "Integer")
	int $field;
#elseif( $type == "String")
	string $field;
#elseif( $type == "Boolean" )
	bool $field;
#elseif ( $type == "Double" )
	double $field;
#elseif( $fulltype.endsWith("java.util.List") || $fulltype.endsWith("java.util.Set") || $type.contains("[]") )
	${pojo.declarationName}Remote${field}Seq $field;
#elseif ($fulltype.endsWith("java.util.Map") )
	dictionary $field;
#elseif ($fulltype.startsWith("ome") )
	::${fulltype.replaceAll("[.]","::")}Remote $field;
#else
	ERROR ===========> Unknown type.
#end
#end
};

#end
##########################################################################
#macro(forwardDeclaration $pojo)
#moduleStart(${pojo.packageDeclaration}) class ${pojo.declarationName}Remote; #moduleStop(${pojo.packageDeclaration})
##
#end
##########################################################################
#macro(classDeclaration $pojo)
#moduleStart(${pojo.packageDeclaration})
#classBody($pojo)
#moduleStop(${pojo.packageDeclaration})
##
#end
##########################################################################
##########################################################################
##########################################################################//
///
// FORWARD DECLARATIONS
//
#ifndef OME_FORWARD_DECLARATIONS
#define OME_FORWARD_DECLARATIONS
#foreach($pojo in $c2j.getPOJOIterator( $cfg.getClassMappings() ))
##set( $key = "ForwardDeclaration:$pojo" )
##if(! $ctx.get($key))
##// ${ctx.put($key,$key)}

#forwardDeclaration($pojo)
##
#foreach($property in $pojo.allPropertiesIterator)
#if($c2j.isComponent($property))
#set($component = $c2j.getPOJOClass($property.getValue()))
###set( $key = "ForwardDeclaration:$component" )
###if(! $ctx.get($key))
##// ${ctx.put($key,$key)}

#forwardDeclaration($component)
##
###end
###end
#end
#end 
#end

#endif
#stop
//
// CLASS DECLARATIONS
//
#foreach($pojo in $c2j.getPOJOIterator( $cfg.getClassMappings() ))
#set( $key = "ClassDeclaration:$pojo" )	
#if(! $ctx.get($key))
// ${ctx.put($key,$key)}
#classDeclaration($pojo)
#foreach($property in $pojo.allPropertiesIterator)
#if($c2j.isComponent($property))
#set($component = $c2j.getPOJOClass($property.getValue()))
#set( $key = "ClassDeclaration:$component" )	
#if(! $ctx.get($key))
// ${ctx.put($key,$key)}
#classDeclaration($component)
#end
#end
#end
#end
#end
#stop



#foreach($pojo in $c2j.getPOJOIterator( $cfg.getClassMappings() ))
#moduleStart(${pojo.packageDeclaration})

#foreach($property in  $pojo.allPropertiesIterator)
#set( $fulltype = $c2j.getJavaTypeName($property,false) ) ## , $generics)
#set( $type = $c2j.unqualify($fulltype) )
#set( $field = $property.name )
#if( $type.endsWith("List") || $type.endsWith("Set") )
	sequence<string> ${pojo.declarationName}Remote${field}Seq;
#end
#end
##
class ${pojo.declarationName}Remote
{
#foreach($property in $pojo.allPropertiesIterator)
#set( $fulltype = $c2j.getJavaTypeName($property,false) ) ## , $generics)
#set( $type = $c2j.unqualify($fulltype) )
#set( $field = $property.name )
	//  $pojo.importType( $fulltype ) $property.name;
#if( $type == "Integer")
	int $field;
#elseif( $type == "String")
	string $field;
#elseif( $type == "Boolean" )
	bool $field;
#elseif ( $type == "Double" )
	double $field;
#elseif( $type.endsWith("List") || $type.endsWith("Set") )
	${pojo.declarationName}Remote${field}Seq $field;
#elseif ($type.endsWith("Map") )
	dictionary $field;
#elseif ($fulltype.startsWith("ome") )
	::${fulltype.replaceAll("[.]","::")}Remote $field;
#else
	ERROR ===========> Unknown type.
#end
#end
};
#moduleStop(${pojo.packageDeclaration})
#end


