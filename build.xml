<?xml version="1.0" encoding="utf-8"?>
<project name="toplevel" default="build-default" basedir="."  xmlns:ivy="antlib:org.apache.ivy.ant">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# $Id$
#
# Copyright 2008 Glencoe Software, Inc. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Written by:  Josh Moore, josh at glencoesoftware.com
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Rewrite of the OMERO build system to allow for building
individual components. Use "ant -p" to see the individual
build-* targets.

-->
    <description>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Top-level OMERO build. "ant" will suffice for most builds. If you need
OmeroCpp (the C++ bindings for OMERO) use "build-all" or "build-cpp".

To get started using Eclipse, execute "ant" and then import the top-level
project. If the build is failing, use "ant build-eclipse" to generate
all needed directories. Eclipse projects also exist for each individual
java component.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    </description>

    <property name="import.dir" value="${basedir}/components/antlib/resources"/>
    <import file="${import.dir}/global.xml"/>

    <target name="init" depends="check-ivy,check-scons,check-ice"/>

    <target name="check-ivy" unless="ivy.done">
        <!-- Prevent future invocations and PermGen errors-->
        <property name="ivy.done" value="done"/>
        <!-- Touch the local configuration file which is no longer mandatory -->
        <touch file="${basedir}/etc/local.properties"/>
        <installIvy/>
        <ivy:buildlist reference="all.buildpath" settingsRef="ivy.toplevel">
            <fileset dir="${omero.home}/components" includes="*/build.xml" excludes="**/policy/**,**/tools/**"/>
        </ivy:buildlist>
        <ivy:buildlist reference="blitzserver.buildpath" settingsRef="ivy.toplevel">
            <fileset dir="${omero.home}/components" includes="*/build.xml" excludes="**/policy/**,**/tools/**"/>
        </ivy:buildlist>
        <!-- Single file paths defined in antlib/resources/directories.xml -->
    </target>

    <target name="quick" description="Deprecated">
        <echo>

        Deprecated: Tests are no longer run by default

        </echo>
        <property name="test.skip" value="true"/>
    </target>

    <target name="clean" description="Calls 'clean' on all components" depends="check-ivy">
        <!-- Calling check-scons here rather than above, so that dependency graph later will re-install
        if a user does "ant clean some-target" -->
        <antcall target="check-scons" inheritRefs="true" inheritAll="true"/>
        <iterate buildpathref="all.buildpath"   target="clean"/>
        <iterate buildpathref="tools.buildpath" target="clean"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${lib.dir}/cache"/>
        <delete includeemptydirs="true">
            <fileset dir="${lib.dir}/repository" includes="omero/**,omero-tools/**"/>
        </delete>
        <delete dir="${target.dir}" quiet="true"/>
    </target>

    <macrodef name="setup-py-install">

        <attribute name="tarball"/>
        <attribute name="dir"/>

        <sequential>
        <mkdir dir="${target.dir}"/>
        <mkdir dir="${target.dir}/lib/python/site-packages"/>
        <untar compression="gzip" src="${lib.dir}/repository/@{tarball}" dest="${target.dir}"/>
        <exec executable="python" dir="${target.dir}/@{dir}" failonerror="true">
            <env key="PYTHONPATH" value="${env.PYTHONPATH}:${target.dir}/lib/python/site-packages"/>
            <arg value="setup.py"/>
            <arg value="install"/>
            <arg value="--prefix=${target.dir}"/>
         </exec>
         </sequential>
    </macrodef>

    <target name="check-scons" description="Checks for scons and sets executable or installs">
        <available property="scons.py" value="${target.dir}/scons/scons.py" filepath="${target.dir}/scons" file="scons.py" />
        <antcall target="build-scons" inheritAll="true" inheritRefs="true"/>
    </target>

    <target name="build-scons" description="Installs the scons build tool" unless="scons.py">
        <unzip src="${lib.dir}/repository/scons-local-1.2.0.d20090223.zip" dest="target/scons"/>
    </target>

    <target name="check-ice" description="Checks for slice/include files and unpacks">
        <available property="slice.dir" value="true" filepath="${target.dir}" file="Ice" />
        <antcall target="build-ice" inheritAll="true" inheritRefs="true"/>
    </target>

    <target name="build-ice" depends="check-scons" description="Installs the Ice code generation executables" unless="slice2java.exe">
        <mkdir dir="${target.dir}/Ice"/>
        <untar compression="gzip" src="${lib.dir}/repository/ice-includes-3.3.0.tar.gz" dest="target/Ice"/>
    </target>

    <target name="build-default" description="Default build calls build" depends="build"/>
    <target name="build" description="Build all components except for C++" depends="init">
        <property name="env.NOMAKE" value="1"/>
        <iterate buildpathref="blitzserver.buildpath" target="dist"/>
        <iterate buildpathref="OmeroPy.buildpath" target="tools-dist"/>
        <iterate buildpathref="OmeroFs.buildpath" target="tools-dist"/>
        <iterate buildpathref="OmeroJava.buildpath" target="tools-dist"/>
        <iterate buildpathref="OmeroImporter.buildpath" target="tools-dist"/>
        <iterate buildpathref="OmeroWeb.buildpath" target="tools-dist"/>
        <iterate buildpathref="licenses.buildpath" target="tools-dist"/>
        <iterate buildpathref="tools.buildpath" target="dist"/>
        <prepareDist/>
    </target>

    <!-- includes C++ -->
    <target name="build-all" description="Build everything and copy to dist" depends="init">
        <iterate buildpathref="all.buildpath" target="dist"/>
        <iterate buildpathref="tools.buildpath" target="build"/>
        <iterate buildpathref="tools.buildpath" target="dist"/>
        <prepareDist/>
    </target>

    <target name="build-blitz" description="Build blitz and copy to dist/blitz" depends="init">
        <iterate buildpathref="blitzserver.buildpath" target="dist"/>
        <!-- Must also build python since it provides our command lines -->
        <iterate buildpathref="OmeroPy.buildpath" target="tools-dist"/>
        <iterate buildpathref="OmeroFs.buildpath" target="tools-dist"/>
        <iterate buildpathref="tools.buildpath" target="dist"/>
        <prepareDist/>
    </target>

    <target name="build-importer" description="Build importer and copy to dist/lib and dist/bin" depends="init">
        <antcall target="build-blitz" inheritRefs="true" inheritAll="true"/>
        <iterate buildpathref="OmeroJava.buildpath" target="tools-dist"/>
        <iterate buildpathref="OmeroImporter.buildpath" target="tools-dist"/>
        <iterate buildpathref="tools.buildpath" target="dist"/>
    </target>

    <target name="build-web" description="Build OmeroWeb and copy to dist" depends="init">
        <antcall target="build-blitz" inheritRefs="true" inheritAll="true"/>
        <iterate buildpathref="OmeroWeb.buildpath" target="tools-dist"/>
        <iterate buildpathref="tools.buildpath" target="dist"/>
    </target>

    <target name="build-cpp" description="Build OmeroCpp bindings and copy to dist/lib" depends="init">
        <antcall target="build-blitz" inheritRefs="true" inheritAll="true"/>
        <iterate buildpathref="OmeroCpp.buildpath" target="tools-dist"/>
        <iterate buildpathref="tools.buildpath" target="dist"/>
    </target>

    <target name="build-java" description="Build OmeroJava bindings and copy to dist/lib" depends="init">
        <antcall target="build-blitz" inheritRefs="true" inheritAll="true"/>
        <iterate buildpathref="OmeroJava.buildpath" target="tools-dist"/>
        <iterate buildpathref="tools.buildpath" target="dist"/>
    </target>

    <target name="build-py" description="Build OmeroPy bindings and copy to dist/lib" depends="init">
        <antcall target="build-blitz" inheritRefs="true" inheritAll="true"/>
        <!-- Currently has no logic, since build-blitz requires all of this -->
    </target>

    <target name="build-schema" description="Build new DB schema and copy to sql/" depends="init">
        <iterate buildpathref="model.buildpath" target="clean"/>
        <iterate buildpathref="dsl.buildpath" target="install"/>
        <iterate buildpathref="model.buildpath" target="install"/>
        <iterate buildpathref="model.buildpath" target="publish-schema"/>
    </target>

    <target name="build-model" description="Generate model code for all language bindings" depends="init">
        <ant antfile="${blitz.comp}/build.xml" dir="${blitz.comp}" target="icegen" inheritAll="false"/>
    </target>

    <target name="build-matlab" description="Provides a matlab toolbox under target" depends="init">
        <antcall target="build-blitz" inheritRefs="true" inheritAll="true"/>
        <iterate buildpathref="OmeroM.buildpath" target="tools-dist"/>
    </target>

    <target name="build-eclipse" description="Creates all source directories needed by eclipse in case default build is failing." depends="init">
        <iterate buildpathref="all.buildpath" target="prepare"/>
        <iterate buildpathref="OmeroJava.buildpath" target="prepare"/>
        <iterate buildpathref="OmeroImporter.buildpath" target="prepare"/>
        <iterate buildpathref="licenses.buildpath" target="prepare"/>
    </target>

    <macrodef name="launchSuite">
        <attribute name="suite"/>
        <sequential>
        <ivy:settings id="ivy.@{suite}"  file="${etc.dir}/ivysettings.xml"/>
        <ivy:buildlist reference="@{suite}.buildpath" settingsRef="ivy.@{suite}" ivyfilepath="test.xml">
            <fileset dir="${omero.home}/components" includes="**/build.xml" excludes="**/tools/build.xml"/>
        </ivy:buildlist>
        <iterate buildpathref="@{suite}.buildpath" target="@{suite}"/>
        </sequential>
    </macrodef>

    <target name="test-compile" description="Compile all non-native tests" depends="init">
        <property name="env.NOMAKE" value="1"/>
        <launchSuite suite="test-compile"/>
    </target>

    <target name="test-compile-all" description="Compile all tests (including C++)" depends="init">
        <launchSuite suite="test-compile"/>
    </target>

    <target name="test-unit" description="Run all unit tests" depends="init">
        <launchSuite suite="test"/>
    </target>

    <target name="test-integration" description="Run all integration tests" depends="init">
        <launchSuite suite="integration"/>
    </target>

    <target name="test-dist" description="Copy test files into dist for further testing" depends="test-compile">
        <ivy:resolve file="ivy.xml" type="jar" conf="test" settingsRef="ivy.toplevel" log="quiet"/>
        <ivy:retrieve conf="test" pattern="${dist.dir}/lib/client/[module].[ext]" sync="false" log="quiet" settingsRef="ivy.toplevel"/>
    </target>

    <target name="release-zip" description="Zip the dist directory into ${product.name}-${omero.version}.zip">
        <zip destfile="target/${product.name}-${omero.version}.zip">
            <zipfileset dir="${dist.dir}" prefix="${product.name}-${omero.version}"
                excludes="bin/omero"/>
            <zipfileset dir="${dist.dir}" prefix="${product.name}-${omero.version}"
                includes="bin/omero"
                filemode="755"/>
        </zip>
        <!-- TODO: This should probably be made into another tools target tools-zip -->
	<copy todir="target">
	    <fileset dir="components/tools/OmeroImporter/target" includes="*.zip"/>
	    <fileset dir="components/tools/OmeroM/target" includes="*.zip"/>
	</copy>
    </target>

    <target name="release-tar" description="Tar the dist directory into ${product-name}-${omero.version}.tar.bz2">
        <tar destfile="${product.name}-${omero.version}.tar.bz2" compress="bzip2">
            <zipfileset dir="${dist.dir}" prefix="${product.name}-${omero.version}"
                excludes="bin/omero"/>
            <zipfileset dir="${dist.dir}" prefix="${product.name}-${omero.version}"
                includes="bin/omero"
                filemode="755"/>
        </tar>
    </target>

    <target name="release-findbugs" description="Generates findbugs.xml and checkstyle.xml for all components" depends="init">
       <iterate buildpathref="all.buildpath"   target="findbugs"/>
       <iterate buildpathref="tools.buildpath" target="findbugs"/>
    </target>

    <target name="release-jdepend" description="Generates jdepend.xml for all components" depends="init">
       <path id="omero.classpath">
           <fileset dir="${omero.home}/lib/repository" />
       </path>
       <jdepend outputfile="target/jdepend.txt" fork="yes" classpathref="omero.classpath">
           <exclude name="java.*"/>
           <exclude name="java.lang.*"/>
           <exclude name="java.io.*"/>
           <exclude name="java.util.*"/>
           <exclude name="javax.*"/>
           <exclude name="org.springframework.*"/>
           <exclude name="org.springframework.orm.*"/>
           <exclude name="org.apache.*"/>
           <exclude name="net.ehcache.*"/>
           <classespath>
               <!--pathelement location="components/model/target/classes"/-->
               <pathelement location="components/server/target/classes"/>
               <!--pathelement location="components/blitz/target/classes"/-->
           </classespath>
       </jdepend>
       <jdepend outputfile="target/jdepend.xml" fork="yes" format="xml" classpathref="omero.classpath">
           <exclude name="java.*"/>
           <exclude name="java.lang.*"/>
           <exclude name="java.io.*"/>
           <exclude name="java.util.*"/>
           <exclude name="javax.*"/>
           <exclude name="org.springframework.*"/>
           <exclude name="org.springframework.orm.*"/>
           <exclude name="org.apache.*"/>
           <exclude name="net.ehcache.*"/>
           <classespath>
               <!--pathelement location="components/model/target/classes"/-->
               <pathelement location="components/server/target/classes"/>
               <!--pathelement location="components/blitz/target/classes"/-->
           </classespath>
       </jdepend>
       <style in="target/jdepend.xml" out="target/jdepend.dot" style="lib/repository/jdepend2dot.xsl"/>
       <exec executable="dot" failifexecutionfails="false"> <!-- In case dot is missing -->
           <arg value="-Tpng"/>
           <arg value="target/jdepend.dot"/>
           <arg value="-o"/>
           <arg value="target/jdepend.png"/>
       </exec>
    </target>

    <target name="release-coverage" depends="build-eclipse"
        description="Merge code coverage reports into single top-level report">
        <path id="omero.classpath">
                <fileset dir="${omero.home}/target/libs" />
        </path>
        <taskdef resource="emma_ant.properties" classpathref="omero.classpath" />
        <emma>
            <merge outfile="${target.dir}/coverage.es" >
                <fileset dir="components" includes="**/target/coverage.emma,**/target/metadata.emma"/>
            </merge>
            <report sourcepath="${src.dir}" >
                <fileset dir="${target.dir}" includes="coverage.es"/>
                <html outfile="${target.dir}/coverage.html" />
                <xml outfile="${target.dir}/coverage.xml" />
            </report>
        </emma>
    </target>

    <target name="release-javadoc" description="Generate Javadocs for all components under dist/docs/api">
        <mkdir dir="${dist.dir}/docs/api"/>
        <patternset id="all.java.files">
            <!-- Includes prefixed with "**" in order to pick up
            tools/ components -->
            <include name="src/**/*.java"/>
            <include name="target/generated/src/**/*.java"/>
            <exclude name="xxx/**"/>
        </patternset>

        <javadoc
            failonerror="true"
            Verbose="true"
            maxmemory="${javadoc.maxmem}"
            destdir="dist/docs/api"
            author="true"
            version="true"
            use="true"
            breakiterator="true"
            windowtitle="OMERO (OME Remote Objects) Server">

            <classpath>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
		    <exclude name="repository/omero/**"/>
		    <exclude name="repository/omero-tools/**"/>
                </fileset>
            </classpath>

            <fileset dir="components/common/" defaultexcludes="yes">
                <patternset refid="all.java.files"/>
            </fileset>
            <fileset dir="components/server/" defaultexcludes="yes">
                <patternset refid="all.java.files"/>
            </fileset>
            <fileset dir="components/romio/" defaultexcludes="yes">
                <patternset refid="all.java.files"/>
            </fileset>
            <fileset dir="components/rendering/" defaultexcludes="yes">
                <patternset refid="all.java.files"/>
            </fileset>
            <!-- Skipping generated files for blitz. Just too many -->
            <fileset dir="components/blitz/src" defaultexcludes="yes" includes="**/*.java"/>
            <fileset dir="components/tools/licenses" defaultexcludes="yes">
                <patternset refid="all.java.files"/>
            </fileset>
            <fileset dir="components/tools/OmeroJava" defaultexcludes="yes">
                <patternset refid="all.java.files"/>
            </fileset>

            <doctitle><![CDATA[<h1> Omero API </h1>]]></doctitle>
            <bottom><![CDATA[
            <p><b><i>Copyright &#169; 2007 The University of Dundee. All Rights Reserved.</i></b></p>
            ]]></bottom>

            <tag name="DEV.TODO" scope="all" description="To do:"/>

            <group title="A. Core System"
                    packages="ome.api:ome.conditions*:ome.parameters*:ome.system*"/>
            <group title="B. Model"
                    packages="ome.model*"/>
            <group title="C. Client Packages"
                    packages="ome.client*:ome.adapters*:pojos*"/>
            <group title="D. Server Packages"
                    packages="ome.api.local*:ome.services*:ome.logic*:ome.tools*:ome.security*:ome.io*:ome.annotations*"/>
            <group title="E. Blitz Server"
                    packages="ome.services.blitz*"/>
            <group title="E. Blitz Client"
                    packages="omero*:omeroj*"/>
            <group title="G. Rendering Engine"
                    packages="omeis*"/>
            <group title="H. Utilities"
                    packages="ome.util*"/>
            <group title="I. Deprecated"
                    packages="ome.dynamic*:ome.rules*"/>

            <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
            <link href="http://www.springframework.org/docs/api/"/>
            <link href="http://www.hibernate.org/hib_docs/v3/api/"/>
            <link href="http://aopalliance.sourceforge.net/doc/"/>
            <link href="http://lucene.apache.org/java/2_2_0/api"/>

        </javadoc>

    </target>

    <target name="release-hudson" depends="check-ivy" description="Saves to the hudson repository for dependent builds">
        <ivy:resolve settingsRef="ivy.toplevel"
            file="${omero.home}/ivy.xml" type="zip" log="quiet"/>
        <ivy:publish settingsRef="ivy.toplevel"
            artifactspattern="${omero.home}/OMERO.server-${omero.version}.zip"
            srcivypattern="${omero.home}/ivy.xml"
            resolver="test-resolver"
            pubrevision="${omero.version}"
            pubdate="${now}"
            status="integration"
            overwrite="true"/>
            <!-- This causes the ivy file to be modified -->
            <!--forcedeliver="true"-->
        <ivy:install settingsRef="ivy.toplevel"
            organisation="omero" module="main" revision="${omero.version}"
            from="omero-resolver" to="hudson-repository"
            transitive="true" overwrite="true"/>
    </target>

    <!--
    Top-level helpers (shared helpers are in components/antlib/resources)
    =====================================================================
    -->
    <target name="_dist" depends="init"><prepareDist/></target>
    <macrodef name="prepareDist">
        <sequential>
            <copy todir="${dist.dir}/etc" overwrite="true">
                <fileset dir="${omero.home}/etc">
                    <exclude name="local.properties"/>
                </fileset>
            </copy>
            <copy todir="${dist.dir}">
                <fileset dir="${omero.home}">
                    <include name="sql/**"/>
                </fileset>
            </copy>

            <mkdir dir="${dist.dir}/lib/client"/>
            <mkdir dir="${dist.dir}/lib/server"/>
            <!-- sync="true" deletes any other files like services.jar or extensions.jar which may be under lib -->
            <ivy:resolve file="ivy.xml" type="jar,egg" conf="server" settingsRef="ivy.toplevel" log="quiet"/>
            <ivy:retrieve conf="server" pattern="${dist.dir}/lib/server/[module].[ext]" sync="false" log="quiet" settingsRef="ivy.toplevel"/>
            <ivy:resolve file="ivy.xml" type="jar,egg" conf="client" settingsRef="ivy.toplevel" log="quiet"/>
            <ivy:retrieve conf="client" pattern="${dist.dir}/lib/client/[module].[ext]" sync="false" log="quiet" settingsRef="ivy.toplevel"/>
       </sequential>
    </macrodef>

</project>
