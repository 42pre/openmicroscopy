<project name="OME-Shoola" default="compile" basedir=".">

<!-- Core properties. -->  
  <property name="lib" value="LIB"/>
  <property name="config" value="config"/>
  <property name="src" value="SRC"/>
  <property name="build" value="build"/>
  <property name="path" value="org/openmicroscopy/shoola"/>
  
<!-- Compilation options. -->
  <property name="deprecation" value="yes"/>
  <property name="debug" value="yes"/>
  <property name="debuglevel" value="lines,vars,source"/>
  
<!-- Application packaging. -->
  <property name="jar" value="jar"/>
  <property name="jar.lib" value="jar/lib"/>
  <property name="jar.libdirname" value="lib"/>
  <property name="jar.config" value="jar/config"/>
  <property name="jar.file" value="jar/shoola.jar"/>
   <property name="jar.manifest.main" value="org.openmicroscopy.shoola.Main"/>
  
<!-- Documents generation. -->
  <property name="docs" value="docs"/>
  <property name="apidocs" value="docs/api"/>
  <property name="privapidocs" value="docs/privapi"/>
  
<!-- Distribution bundle. -->
  <property name="jnisrc" value="jnisrc"/>
  <property name="distzip" value="ome.zip"/>
  
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Additional properties to support testing.
 * ${test.src} is the directory where the sources for the tests are.
 * ${test.out} is the directory where the app is compiled for testing.
 * ${test..launcher} is the tool that we use to run the tests.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->  
  <property name="test.src" value="TEST"/>
  <property name="test.out" value="test-bin"/>
  <property name="test.launcher" value="SuiteLauncher"/>




<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Follows the standard targets.  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Set the timestamp and create the build directory structure used by compile.
 * The directory structures found in ${src} (base directory of the app sources)
 * are replicated into ${build} (skipping over CVS directories).  
 * Resource files from these original directories are also copied into
 * ${build} (CVS files are not).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

  <target name="init">
    <tstamp/>
    <mkdir dir="${build}"/>
     <copy todir="${build}">
       <fileset dir="${src}" excludes="**/*.java"/>
     </copy>
  </target>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Compile the java code from ${src} into ${build}.
 * The classpath is set to contain any jar file within ${lib} or any of its
 * sub-directories.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <available classname="javax.media.j3d.SceneGraphObject" property="j3d"/>

  <target name="compile" depends="init">
    <javac  srcdir="${src}"
	       destdir="${build}"
           deprecation="${deprecation}"
           debug="${debug}"
           debuglevel="${debuglevel}">
      <include name="**/*.java"/>
      <exclude name="**/spots/**/*.java" unless="j3d"/>
      <classpath>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>
  
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Package and link the whole application in the ${jar} directory.
 * We first create the directory structure, then we copy over libraries and
 * configuration files.  Finally, we package all java bytecode and resource
 * files found in ${build} into ${jar}.
 * The manifest is automatically generated.  The class path attribute is set
 * to contain all the jar files in ${lib} (jars in sub-dirs are excluded).
 * The main class attribute is set to ${jar.manifest.main}. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="jar" depends="compile">
    
    <!-- Make directory structure. -->
    <mkdir dir="${jar}"/>
    <mkdir dir="${jar.lib}"/>
    <mkdir dir="${jar.config}"/>
    
    <!-- Copy files over. -->
    <copy todir="${jar.lib}">
      <fileset dir="${lib}" includes="*.jar"/>
                                   <!-- So test jars are excluded. -->
    </copy>
    <copy todir="${jar.config}">
      <fileset dir="${config}"/>
    </copy>
    
    <!-- Build the string to use for Class-Path in manifest. -->
    <dirname property="lib.path" file="${lib}/foo"/>  
        <!-- Note: the above gets the absolute path preceding foo. -->
    <pathconvert pathsep=" " dirsep="/" property="jar.manifest.cp">
      <path>
        <fileset dir="${lib}" includes="*.jar"/>
                                   <!-- So test jars are excluded. -->
      </path>
      <map from="${lib.path}" to="${jar.libdirname}"/>
    </pathconvert>
 
    <!-- Package Shoola and generate its manifest. -->
    <jar destfile="${jar.file}">
      <fileset dir="${build}"/>
      <manifest>
      	<attribute name="Created-By" value="OME Development Team"/>
        <attribute name="Class-Path" value="${jar.manifest.cp}"/>
        <attribute name="Main-Class" value="${jar.manifest.main}"/>
      </manifest>
    </jar>
  </target>
  

<!-- TODO: review an comment this target. -->
  <target name="apidocs">
    <mkdir dir="${apidocs}"/>
    <javadoc sourcepath="${src}" destdir="${apidocs}"
             packagenames="org.openmicroscopy.*"
             windowtitle="OME Shoola API"
             use="true"
             author="true"
             version="true"
             Footer="">
      <link href="http://java.sun.com/j2se/1.3/docs/api/" />
      <bottom><![CDATA[<i>Copyright &#169; 2002-2003 Open Microscopy Environment.  All Rights reserved.</i>]]></bottom>
    </javadoc>
  </target>

<!-- TODO: review an comment this target. -->
  <target name="privapidocs">
    <mkdir dir="${privapidocs}"/>
    <javadoc sourcepath="${src}" destdir="${privapidocs}"
             packagenames="org.openmicroscopy.*"
             windowtitle="OME Shoola Private API"
             use="true"
             author="true"
             version="true"
             Private="true"
             Footer="">
      <link href="http://java.sun.com/j2se/1.3/docs/api/" />
      <bottom><![CDATA[<i>Copyright &#169; 2002-2003 Open Microscopy Environment.  All Rights reserved.</i>]]></bottom>
    </javadoc>
  </target>

<!-- TODO: review an comment this target. -->
  <target name="dist" depends="compile,apidocs">
    <delete file="${distzip}" quiet="true"/>
    <zip zipfile="${distzip}">
      <fileset dir="." includes="${build}/**/*"/>
      <fileset dir="." includes="${src}/**/*"/>
      <fileset dir="." includes="${jnisrc}/**/*"/>
      <fileset dir="." includes="${docs}/**/*"/>
      <fileset dir="." includes="build.xml"/>
    </zip>
    <copy file="${distzip}" tofile="${DSTAMP}-${distzip}"/>
  </target>



 
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Delete all directory trees and files generated by any of this file's
 * target.  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="clean">
    <delete dir="${build}"/>
    <delete dir="${jar}"/>
    <delete dir="${docs}"/>
    <delete file="${distzip}"/>
    <delete dir="${test.out}"/>
  </target>




<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Follows the additional targets to support testing.  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Prepare ${test.out} (the directory where we build and run the tests) for the
 * building process carried out by compile_tests.  
 * If ${test.out} already exists, we first remove it and then create a new one.
 * The directory structures found in ${src} (base directory of the app sources)
 * and ${test.src} (base directory of the test suite sources) are replicated and 
 * merged into ${test.out} (skipping over CVS directories).  
 * Resource files from these original directories are also copied into
 * ${test.out} (CVS files are not).
 * 
 * DON'T FORGET:
 * Even though ${src} and ${test.src} are two separate directories, they're
 * logically considered as one.  So you must *never* have a file in ${test.src}
 * with the same name and relative path to ${test.src} as another
 * file in ${src}, such as ${test.src}/some/path/foo.bar and 
 * ${src}/some/path/foo.bar (in this case the file that ends up in ${test.out}
 * is the most recent one).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="test_init">
    <tstamp/>
    <delete dir="${test.out}"/>
    <mkdir dir="${test.out}"/>
    <copy todir="${test.out}">
       <fileset dir="${src}" excludes="**/*.java"/>
    </copy>
    <copy todir="${test.out}">
       <fileset dir="${test.src}" excludes="**/*.java"/>
    </copy>
  </target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Build first the app code and then the test suite into ${test.out}.
 * 
 * DON'T FORGET:
 * Even though ${src} and ${test.src} are two separate directories, they're
 * logically considered as one.  So you must *never* have a source file in
 * ${test.src} with the same name and relative path to ${test.src} as another
 * file in ${src}, such as ${test_src}/some/path/foo.java and 
 * ${src}/some/path/foo.java (in this case the file that ends up being compiled
 * in ${test.out} is the one in ${src}).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="compile_tests" depends="test_init">
    <javac srcdir="${src}"
	       destdir="${test.out}"
           deprecation="${deprecation}"
           debug="${debug}"
           debuglevel="${debuglevel}">
      <classpath>
        <fileset dir="${lib}" includes="**/*.jar"/>
      </classpath>
    </javac>
    <javac srcdir="${test.src}"
	       destdir="${test.out}"
           deprecation="${deprecation}"
           debug="${debug}"
           debuglevel="${debuglevel}">
      <classpath>
        <fileset dir="${lib}" includes="**/*.jar"/>
        <!-- Add previously compiled classes to the cp. -->
        <pathelement location="${test.out}"/>
      </classpath>
    </javac>
  </target>


<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Time to run your tests!
 * Forks off a new JVM to execute the ${test.launcher} tool which will build
 * and run the test suite as specified in its configuration file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <target name="run_tests" depends="compile_tests">
    <java classname="${test.launcher}"
	  dir="${test.out}"
          fork="yes">
      <classpath>
        <fileset dir="${lib}" includes="**/*.jar"/>
        <pathelement location="${test.out}"/>
      </classpath>
    </java>
  </target>


</project>
