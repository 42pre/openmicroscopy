<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:j="jelly:core" xmlns:ant="jelly:ant"
xmlns:maven="jelly:maven" xmlns:u="jelly:util" default="help">

 <!-- HELP -->
 <goal name="help">
   <ant:echo></ant:echo>
   <ant:echo>********************************************************</ant:echo>
   <ant:echo> Omero Build System:</ant:echo>
   <ant:echo> -------------------</ant:echo>
   <ant:echo> Goals: (e.g. "maven GOAL")</ant:echo>
   <ant:echo>  help           --  This file</ant:echo>
   <ant:echo>  build          --  Compile to target and package </ant:echo>
   <ant:echo>  install        --  Add dependencies to your repository </ant:echo>
   <ant:echo>  test-all       --  Run all tests (see test mode below)</ant:echo>
   <ant:echo>  clean          --  Remove all generated items </ant:echo>
   <ant:echo> </ant:echo>
   <ant:echo> Properties: (e.g. "maven -DPROPERTY=VALUE")</ant:echo>
   <ant:echo>  maven.test.mode={integration|unit} (Now: ${maven.test.mode})</ant:echo>
   <ant:echo></ant:echo>
   <ant:echo>********************************************************</ant:echo>
   <ant:echo> For more information, see http://maven.apache.org</ant:echo>
   <ant:echo></ant:echo>
 </goal>

<!-- Dependencies -->
   <preGoal name="jar:jar">
     <attainGoal name="jam"/>
     <attainGoal name="create-properties"/>
   </preGoal>
   <preGoal name="war:init">
     <attainGoal name="jam"/>
     <attainGoal name="create-properties"/>
   </preGoal>
   <preGoal name="test:test">
     <attainGoal name="filterTests"/>
   </preGoal>
   <preGoal name="clean:clean">
     <ant:delete file="${basedir}/src/spring.properties"/>
   </preGoal> 
   <goal name="test-all">
     <maven:property name="goal" defaultValue="test:test" />
     <attainGoal name="multiproject:goal"/>
   </goal>

<!-- Setup --> 
  <goal name="init" prereqs="create-properties"/>
  <goal name="get-tomcat-plugin">
    <maven:property name="artifactId" defaultValue="maven-tomcat-plugin" />
    <maven:property name="groupId" defaultValue="codeczar-tomcat" />
    <maven:property name="version" defaultValue="1.1" />
    <attainGoal name="plugin:download"/>
  </goal>
  <goal name="get-jam-plugin">
    <maven:property name="artifactId" defaultValue="maven-jam-plugin" />
    <maven:property name="groupId" defaultValue="jam" />
    <maven:property name="version" defaultValue="2.1" />
    <attainGoal name="plugin:download"/>
  </goal>
 <goal name="create-classpath">
   <ant:pathconvert targetos="${ant.os}" 
        property="my.classpath"
        refid="maven.dependency.classpath"/>
   <ant:echo file="${maven.build.dir}/classpath.sh"><!-- TODO -->
export CLASSPATH=${maven.build.dest}:${my.classpath}
   </ant:echo>
 </goal>


<!-- For calling from the top level -->
  <goal name="build">
    <attainGoal name="multiproject:artifact" />
  </goal>
  <goal name="install">
    <attainGoal name="multiproject:install" />
  </goal>
  <goal name="clean">
    <attainGoal name="multiproject:clean"/>
    <attainGoal name="clean:clean"/>
  </goal>


<!-- From calling within a component -->
  <goal name="create-properties">
    <u:file name="${basedir}/src" var="srcDir"/>
    <j:if test="${srcDir.exists()}">
     <ant:propertyfile 
	comment=" DO NOT EDIT: Generated Database and Server properties from build.properties"
        file="${basedir}/src/spring.properties">
       <ant:entry key="database.driver" value="${database.driver}"/>
       <ant:entry key="database.url" value="${database.url}"/>
       <ant:entry key="database.username" value="${database.username}"/>
       <ant:entry key="database.password" value="${database.password}"/>
       <ant:entry key="database.dialect" value="${database.dialect}"/>
       <ant:entry key="database.show_sql" value="${database.show_sql}"/>
       <ant:entry key="server.host" value="localhost"/>
       <ant:entry key="server.port" value="8080"/>
       <ant:entry key="local.path"  value="${maven.build.dest}"/>
       <ant:entry key="omeds.url"   value="${omeds.url}"/>
       <ant:entry key="omeds.user"  value="${omeds.user}"/>
       <ant:entry key="omeds.pass"  value="${omeds.pass}"/>

     </ant:propertyfile>
    </j:if>
   </goal>

   <goal name="itest">
     <ant:ant
         antfile="${omero.home}/jam.xml"
         dir="${basedir}"
         target="itest"
         inheritAll="true"
         inheritRefs="false"/>
   </goal>

 <!-- from: http://java2.5341.com/msg/33178.html -->
  <goal name="filterTests">
   <j:set var="testModeX" value="${maven.test.mode}X" />
   <j:if test="${testModeX == 'X'}" >
     <j:set var="maven.test.mode" value="all" />
   </j:if>
   <echo>Running ${maven.test.mode} tests</echo>
   <j:if test="${maven.test.mode != 'all'}" >
     <j:set var="includeProp" value="test.${maven.test.mode}.includes" />
     <j:if test="${context.getVariable(includeProp) != null}">
       <u:tokenize var="patterns" delim=",">${context.getVariable(includeProp)}</u:tokenize>
       <j:forEach var="pattern" items="${patterns}">
         <j:set var="dummy" value="${pom.build.unitTest.addInclude(pattern)}" />
       </j:forEach>
     </j:if>
     <j:set var="excludeProp" value="test.${maven.test.mode}.excludes" />
     <j:if test="${context.getVariable(excludeProp) != null}">
       <u:tokenize var="patterns" delim=",">${context.getVariable(excludeProp)}</u:tokenize>
       <j:forEach var="pattern" items="${patterns}">
         <j:set var="dummy" value="${pom.build.unitTest.addExclude(pattern)}" />
       </j:forEach>
     </j:if>
   </j:if>
 </goal>

</project>
