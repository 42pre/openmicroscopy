<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:j="jelly:core" xmlns:ant="jelly:ant"
xmlns:maven="jelly:maven" xmlns:u="jelly:util" default="help">

 
<!-- ========================================================= -->
 <!--
  Contents
   - help
   - setup
   - top-level goals
   - component goals
   - deployment
   - dependencies
  -->
<!-- ========================================================= -->


<!-- ========================================================= -->
 <!-- HELP -->
<!-- ========================================================= -->
 <goal name="help" 
	description="Default; provides help with Omero build system">
   <ant:echo></ant:echo>
   <ant:echo>********************************************************</ant:echo>
   <ant:echo> Omero Build System:</ant:echo>
   <ant:echo> -------------------</ant:echo>
   <ant:echo> Main goals: (e.g. "maven GOAL")</ant:echo>
   <ant:echo>  help        --  This file</ant:echo>
   <ant:echo>  build       --  Compile to target and package </ant:echo>
   <ant:echo>  install     --  Add dependencies to your repository </ant:echo>
   <ant:echo>  deploy      --  Copy war to container (see server.dir)</ant:echo>
   <ant:echo>  test-all    --  Run all tests (see test mode below)</ant:echo>
   <ant:echo>  clean       --  Remove all generated items </ant:echo>
   <ant:echo> </ant:echo>
   <ant:echo>    Use "maven -u" for a list of all goals  </ant:echo>
   <ant:echo>    Use "maven -h" for help on maven  </ant:echo>
   <ant:echo> </ant:echo>
   <ant:echo> Main properties: (e.g. "maven -DPROPERTY=VALUE")</ant:echo>
   <ant:echo>  maven.test.mode={integration|unit} (Now: ${maven.test.mode})</ant:echo>
   <ant:echo>  maven.server.dir=WEBAPP_DIR (Now: ${maven.server.dir})</ant:echo>
   <ant:echo> </ant:echo>
   <ant:echo>    See project.properties and build.properties for all properties  </ant:echo>
   <ant:echo></ant:echo>
   <ant:echo>********************************************************</ant:echo>
   <ant:echo> For more information, see http://maven.apache.org</ant:echo>
   <ant:echo></ant:echo>
 </goal>

<!-- ========================================================= -->
<!-- SETUP --> 
<!-- ========================================================= -->
  <goal name="init" prereqs="create-properties,create-classpath"
	description="Initialization for all tasks"/><!--TODO jam -->
  <goal name="get-tomcat-plugin" 
	description="Download tomcat plugin for deployment">
    <maven:property name="artifactId" defaultValue="maven-tomcat-plugin" />
    <maven:property name="groupId" defaultValue="codeczar-tomcat" />
    <maven:property name="version" defaultValue="1.1" />
    <attainGoal name="plugin:download"/>
  </goal>
  <goal name="get-jam-plugin"
	description="Get jam -- the maven-ant bridge">
    <maven:property name="artifactId" defaultValue="maven-jam-plugin" />
    <maven:property name="groupId" defaultValue="jam" />
    <maven:property name="version" defaultValue="2.1" />
    <attainGoal name="plugin:download"/>
  </goal>
 <goal name="create-classpath"
	description="Produces a bash source-able classpath definition">
   <ant:pathconvert targetos="${ant.os}" 
        property="my.classpath"
        refid="maven.dependency.classpath"/>
   <ant:echo file="${maven.build.dir}/Classpath.sh"><!-- TODO -->
export CLASSPATH=${maven.build.dest}:${my.classpath}
   </ant:echo>
 </goal>


<!-- ========================================================= -->
<!-- TOP-LEVEL: For calling from the top level -->
<!-- ========================================================= -->
  <goal name="build" description="Produces main artifacts (jars/wars) under target/ ">
    <attainGoal name="multiproject:artifact" />
  </goal>
  <goal name="install" description="Copies main artifacts to local maven repository">
    <attainGoal name="multiproject:install" />
  </goal>
  <goal name="clean" description="Removes all generated content">
    <attainGoal name="multiproject:clean"/>
    <attainGoal name="clean:clean"/>
  </goal>
   <goal name="test-all" description="Runs test:test goal on all components">
     <j:expr value="${context.setVariable('maven.test.skip', false)}"/>
     <maven:property name="goal" defaultValue="test:test" />
     <attainGoal name="multiproject:goal"/>
   </goal>



<!-- ========================================================= -->
<!-- COMPONENTS: From calling within a component -->
<!-- ========================================================= -->
  <goal name="create-properties" description="Produces spring.properties file for all components">
    <u:file name="${basedir}/src" var="srcDir"/>
    <j:if test="${srcDir.exists()}">
     <ant:propertyfile 
	comment=" DO NOT EDIT: Generated Database and Server properties from build.properties"
        file="${basedir}/src/spring.properties">
       <ant:entry key="database.driver" value="${database.driver}"/>
       <ant:entry key="database.url" value="${database.url}"/>
       <ant:entry key="database.username" value="${database.username}"/>
       <ant:entry key="database.password" value="${database.password}"/>
       <ant:entry key="database.dialect" value="${database.dialect}"/>
       <ant:entry key="database.show_sql" value="${database.show_sql}"/>
       <ant:entry key="server.host" value="${server.host}"/>
       <ant:entry key="server.port" value="${server.port}"/>
       <ant:entry key="local.path"  value="${maven.build.dest}"/>
       <!-- OME-JAVA Properties -->
       <ant:entry key="omeds.url"   value="${omeds.url}"/>
       <ant:entry key="omeds.user"  value="${omeds.user}"/>
       <ant:entry key="omeds.pass"  value="${omeds.pass}"/>
       <ant:entry key="omero.context"  value="${omero.context}"/>
       <!-- Hibernate Properties -->
       <ant:entry key="hibernate.connection.driver_class" value="${database.driver}"/>
       <ant:entry key="hibernate.connection.url" value="${database.url}"/>
       <ant:entry key="hibernate.connection.username" value="${database.username}"/>
       <ant:entry key="hibernate.connection.password" value="${database.password}"/>
       <ant:entry key="hibernate.dialect"  value="${database.dialect}"/>

     </ant:propertyfile>
     <ant:copy file="${basedir}/../../log4j.properties" todir="${basedir}/src"/>
    </j:if>
   </goal>

   <goal name="delete-properties" description="Removes spring.properties and log4j.properties from components">
     <ant:delete file="${basedir}/src/spring.properties"/>
     <ant:delete file="${basedir}/src/log4j.properties"/>
   </goal>

 <!-- Necessary due to maven issues. Hopefully resolved in Maven 2 -->
 <goal name="bootstrap" description="Necessary initialization for a new installation">
    <maven:reactor
      basedir="."
      includes="components/common/project.xml"
      goals="jar:install"
      ignoreFailures="false"
    />
    <maven:reactor
      basedir="."
      includes="components/client/project.xml"
      goals="jar:install"
      ignoreFailures="false"
    />
    <maven:reactor
      basedir="."
      includes="components/shoola-adapter/project.xml"
      goals="jar:install"
      ignoreFailures="false"
    />
    <!--
    <j:forEach var="reactorProject" items="${reactorProjects}">
      ==* ADD postProcessing="true" to reactor
      ... Do whatever you want with the harvested information ...
    </j:forEach>
    -->
 </goal>

<!-- ========================================================= -->
<!-- DEPLOYMENT -->
<!-- ========================================================= -->

 <goal name="server" description="Prepares server" prereqs="build">
    <j:set var="tomcatX" value="${maven.tomcat.username}X" />
    <j:if test="${tomcatX == 'X'}" >
      <attainGoal name="server-tomcat"/>
    </j:if>
<!-- TODO -->
    <ant:echo message="  "/>
    <ant:echo message=" =================================== "/>
    <ant:echo message=" Reload/Start your web container now "/>
    <ant:echo message=" =================================== "/>
    <ant:echo message="  "/>
 </goal>

 <goal name="server-tomcat" description="Prepares Tomcat using tomcat plugin">
    <maven:reactor
      basedir="."
      includes="components/server/project.xml"
      goals="tomcat:remove,tomcat:install"
      ignoreFailures="false"
    />
 </goal>

 <goal name="server-misc" description="Copies war to server director">
    <ant:copy todir="${server.dir}"
	file="${maven.repo.local}/omero/wars/omero-server-1.0.war"
	/>
 </goal>


<!-- ========================================================= -->
<!-- DEPENDENCIES: what happens when and why -->
<!-- ========================================================= -->
   <postGoal name="java:prepare-filesystem">
     <attainGoal name="init"/>
   </postGoal>
   <postGoal name="war:war-resources">
     <attainGoal name="init"/>
   </postGoal>
   <preGoal name="clean:clean">
     <attainGoal name="delete-properties"/>
     <ant:delete file="${basedir}/jcoverage.ser"/>
   </preGoal> 
 <!-- http://weblogs.java.net/blog/michael_n/archive/2005/05/maven_multiple.html-->
  <preGoal name="java:compile">
    <u:file name="${maven.gen.src}" var="genDir"/>
    <j:if test="${genDir.exists()}">
    <path id="additional.src.path">
      <pathelement location="${maven.gen.src}"/>
    </path>
    <maven:addPath id="maven.compile.src.set"
		refid="additional.src.path"/>
    </j:if>
  </preGoal> 
 <!-- Allows for switching between integration and unit testing:
      from: http://java2.5341.com/msg/33178.html -->
   <preGoal name="test:test">
   <j:set var="testModeX" value="${maven.test.mode}X" />
   <j:if test="${testModeX == 'X'}" >
     <j:set var="maven.test.mode" value="all" />
   </j:if>
   <echo>Running ${maven.test.mode} tests</echo>
   <j:if test="${maven.test.mode != 'all'}" >
     <j:set var="includeProp" value="test.${maven.test.mode}.includes" />
     <j:if test="${context.getVariable(includeProp) != null}">
       <u:tokenize var="patterns" delim=",">${context.getVariable(includeProp)}</u:tokenize>
       <j:forEach var="pattern" items="${patterns}">
         <j:set var="dummy" value="${pom.build.unitTest.addInclude(pattern)}" />
       </j:forEach>
     </j:if>
     <j:set var="excludeProp" value="test.${maven.test.mode}.excludes" />
     <j:if test="${context.getVariable(excludeProp) != null}">
       <u:tokenize var="patterns" delim=",">${context.getVariable(excludeProp)}</u:tokenize>
       <j:forEach var="pattern" items="${patterns}">
         <j:set var="dummy" value="${pom.build.unitTest.addExclude(pattern)}" />
       </j:forEach>
     </j:if>
   </j:if>
   </preGoal>
   <!-- TODO Needed for doing in class compilation. Try removing -->
   <preGoal name="java:compile">
    <ant:path id="jdk.classpath">
        <ant:pathelement path="${tools.jar}"/>
    </ant:path>
    <maven:addPath id="maven.dependency.classpath" refid="jdk.classpath"/>
  </preGoal>

</project>
