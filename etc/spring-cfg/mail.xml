<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
         xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-2.0.xsd"
       default-lazy-init="false">
<!--
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Copyright 2015 University of Dundee. All rights reserved.
# Use is subject to license terms supplied in LICENSE.txt
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

  <description>
      Due to the complexity of mail configuration and the templating
      of messages to users, the mail spring beans are all available
      here for editing. Note however:

                  MODIFICATIONS REQUIRE A RESTART.

                   CHANGES WILL NOT BE PERSISTED.

  </description>

  <bean id="mailUtil" class="ome.services.mail.MailUtil">
    <constructor-arg index="0" value="${omero.mail.from}" />
    <constructor-arg index="1" ref="mailSender"/>
  </bean>

  <alias name="${omero.mail.bean}" alias="mailSender"/>

  <bean id="mailSenderTargetSource"
      class="org.springframework.aop.target.HotSwappableTargetSource">
      <constructor-arg ref="javaMailSenderImpl"/>
  </bean>

  <bean id="defaultMailSender" class="org.springframework.aop.framework.ProxyFactoryBean">
      <description>
          Default mail sender uses a swappable target source so that for
          testing we can replace it with a no-op version.
      </description>
      <property name="targetSource" ref="mailSenderTargetSource"/>
  </bean>

  <!-- configure the MailSender with the authenticated session -->
  <bean id="javaMailSenderImpl"
      class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="${omero.mail.host}" />
      <property name="port" value="${omero.mail.port}" />
      <property name="protocol" value="${omero.mail.transport.protocol}" />
      <property name="session" ref="mailSession" />
      <property name="javaMailProperties">
          <props>
              <prop key="mail.smtp.sendpartial">true</prop>
          </props>
      </property>
  </bean>

  <!-- setup an authenticated session -->
  <bean id="mailSession" class="javax.mail.Session" factory-method="getInstance">
      <constructor-arg>
          <props>
              <prop key="mail.smtp.auth">${omero.mail.smtp.auth}</prop>
              <prop key="mail.smtp.debug">${omero.mail.smtp.debug}</prop>
              <prop key="mail.smtp.connectiontimeout">${omero.mail.smtp.connectiontimeout}</prop>
              <prop key="mail.smtp.sendpartial">true</prop>
              <prop key="mail.smtp.starttls.enable">${omero.mail.smtp.starttls.enable}</prop>
              <prop key="mail.smtp.socketFactory.port">${omero.mail.smtp.socketFactory.port}</prop>
              <prop key="mail.smtp.socketFactory.class">${omero.mail.smtp.socketFactory.class}</prop>
              <prop key="mail.smtp.socketFactory.fallback">${omero.mail.smtp.socketFactory.fallback}</prop>
              <prop key="mail.smtp.timeout">${omero.mail.smtp.timeout}</prop>
          </props>
      </constructor-arg>
      <constructor-arg ref="smtpAuthenticator" />
  </bean>

  <!-- Authenticator implementation -->
  <bean id="smtpAuthenticator" class="ome.security.SmtpAuthenticator">
      <constructor-arg value="${omero.mail.username}" />
      <constructor-arg value="${omero.mail.password}" />
  </bean>

  <!-- this is a template message that we can pre-load with default state -->
  <bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
      <property name="from" value="${omero.mail.from}" />
  </bean>

</beans>


