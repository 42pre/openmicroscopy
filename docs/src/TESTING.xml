<?xml version="1.0" encoding="UTF-8"?>
<chapter id="test">
  <title>Testing</title>
    <para>
      or <emphasis>"Dependency injection, getConfigLocations, integration,
      oh my."</emphasis>
    </para>
    <section id="test-unit">
      <title>Unit Testing</title>
      <para>
	The unit testing framework is fairly simple.  Only methods which contain logic written within the OME Java Server are tested.  This means that framework functionality like remoting is <emphasis>not</emphasis> tested.  Neither is DAO functionality; this is a part of integration testing. (see below)
      </para>
      <para>
	Therefore, most of the code which is unit tested lies in the logic packages of the server component.  This is done using <ulink url="http://jmock.org">jMock</ulink>.
      </para>
      <para>
	You can run the unit tests for any component from its directory by entering:
      </para>
      <programlisting>
	maven utest

	# or if you haven't changed the value of maven.test.mode simply:
	maven test
      </programlisting>
      <para>
	The same can be done for all components using:
      </para>
      <programlisting>
	maven utest-all
      </programlisting>
      <para>
	from the top-level directory.
      </para>
    </section>
    <section id="test-integration">
      <title>Integration Testing</title>
      <para>
	Integration testing is a bit more complex.
      </para>
      <para>
	Because of the reliance on a database (which is not easily mockable), all DAO classes are tested in integration mode. 
      </para>
      <para>
	To run integration tests, use <literal>maven itest</literal> from the individual component directories and <literal>maven itest-all</literal> from the top-level directory. 
      </para>
      <section id="test-int-db">
	<title>DbUnit Testing</title>
	<para>
	  Several special integration tests, based on the <ulink url="http://dbunit.sourceforge.net/">DbUnit</ulink> JUnit extension, are also included. These currently require the creation of a special DB (specifically <literal>"[your standard DB url]-test"</literal>).
	</para>
	<para>
	  Currently, these tests will fail. Documentation on preparing these tests will be added later. <!-- TODO -->
	</para>
      </section>
    </section>    
    <section id="test-verifying">
      <title>Did the tests pass?</title>
      For each test that is run, a report is produced in: <literal>[COMPONENT_NAME]/target/test-report</literal>. Here, you can find all exceptions or failures. 
    </section>
    <section id="test-writing">
      <title>Writing your own tests</title>
      <para>
        The only restrictions placed on a test are:
      </para>
      <itemizedlist>
       <listitem>
        They must be placed in the appropriate directory: <literal>utests</literal>, <literal>dbtests</literal> and <literal>itests</literal> under the <literal>test</literal> directory.<!-- TODO give example -->
	</listitem>
        <listitem>They must end in "<literal>Test</literal>"</listitem>
	<listitem>They must not begin with "<literal>Abstract</literal>"</listitem>
      </itemizedlist>
      <para>
        Otherwise, any classes subclassing from <literal>TestCase</literal> will be run.
      </para>
    </section>
</chapter>
