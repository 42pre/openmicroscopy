<?xml version="1.0" encoding="UTF-8"?>
<chapter id="jmx">
  <title>Getting Started</title>
    <para>
      As with any new framework, it takes a while to work through the various layers. 
      We will assume that due to the development quality of the project that anyone interested 
      will first begin by examining the source code. 
      Let's start with building.
    </para>
  <section id="start-build">
    <title>Building</title>
    <para>
      The OMERO build system is currently based on <ulink url="http://maven.apache.org">Maven</ulink>. 
      In addtion, to work with the Omero source base, you will need to have a fully working OME database,
      not necessarily Postgres, a Java Development Kit, and a Servlet container, as well as various environment variables.
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  Install <ulink url="http://java.sun.com">Java</ulink>. 
	  <emphasis>The Omero server code requires Java 5.</emphasis> 
	  Also, set the JAVA_HOME environment variable to your JDK installation
	</para>
      </listitem>
      <listitem>
	<para>
	  Install a Servlet Container (Tomcat, Jetty, Resin, or JBoss et al.). 
	  Most testing is done on <ulink url="http://jakarta.apache.org/tomcat">Tomcat</ulink>. 
	</para>
      </listitem>
      <listitem>
	<para>
	  Install Maven. 
	  Set MAVEN_HOME to your Maven installation.
	  Alternatively you can use the included Maven installation and set MAVEN_HOME to OMERO_HOME/lib/maven/.
	  If you do this, also run the command: 
	  <literal>
	  OMERO_HOME/lib/maven/bin/install_repo.sh HOME_DIR/.maven/repository
	  </literal>
	  install_repo.bat is available for Windows users. 
	  Also, place MAVEN_HOME/bin/maven(.bat) on your PATH.
	</para>
      </listitem>
      <listitem>
	<para>
	  Copy docs/examples/build.properties.example to OMERO_HOME or HOME; edit the properties for your site. 
	  <!-- TODO information on setting properties, especially for another database -->
	</para>
	<para>
	  Note: This file should <emphasis>not</emphasis> be put under revision control!
	</para>
      </listitem>
    </itemizedlist>
    <para>
      Now you are ready to <emphasis>build and install</emphasis> Omero.  
      Run <literal>maven bootstrap</literal> to prepare the installation. 
      Then run <literal>maven install</literal>to place all jars and the war file in your local maven repository. 
      Copy the war file under 
      <literal>OMERO_HOME/components/server/target</literal>
      to your servlet container. Enjoy!
    </para>
    <para>
      Alternatively, follow the container-specific instructions below.
    </para>
  </section>
  <section id="start-install">
    <title>Installing</title>
    <para>
      If you are not building from source, but have downloaded the war (web-application resource) file then your work is a bit simpler.
      Simply copy the war (web application resource) file to your servlet container. Once it is unpacked, edit:
      <literal>
	/WEB-INF/classes/spring.properties
      </literal>
      to connect to the database.
    </para>
    <para>
      Once you start your servlet container, you can run the test suite against it.
    </para>
    <para>
      Note: These instructions are for releases only.  If you are working from subversion, please see "Building" above to get things running.
    </para>
    <section id="start-install-tomcat">
      <title>Installing on Tomcat</title>
      <para>
	There are several methods to make working with a Tomcat
	instance simpler.
      </para>
      <para>
	Edit the Tomcat section of your build.properties file, mentioned under "Building".
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    Run "maven" from OMERO_HOME
	    If maven is not on your path, alternatively run:
	    <literal>OMERO_HOME/lib/maven/bin/maven</literal>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    cd to OMERO_HOME/components/wars/srv
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Run 
	    <literal>maven tomcat:deploy</literal>
	  </para>
	</listitem>
      </itemizedlist>
    </section>
  </section>	
  <section id="start-use">
    <title>Using</title>
    <para>
      Building clients that access the Omero service is as easy as having omero-client.jar and omero-model.jar on your classpath.
    </para>
    <para>
      Then create a ServiceFactory and use it to obtain a Service.
    </para>
    <para>
      <programlisting>
	ServiceFactory services = new ServiceFactory();
	HierarchyBrowsing proxy = services.getHierarchyBrowsingService();</programlisting>
    </para>
  </section>
</chapter>
